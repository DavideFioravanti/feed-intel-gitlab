From d3bb65a1af516eb48c820d361d4488d8334d63d1 Mon Sep 17 00:00:00 2001
From: CI Assistant <yossi.ilkanaev@intel.com>
Date: Wed, 24 Oct 2018 07:29:48 +0200
Subject: [PATCH] Merge pull request #233 in SW_UGW/linux from
 feature/DRVLIB_SW-890-data-path-short-cut-enable-disable-for-power-saving to
 master

* commit '609befeadc43328804d8723321bd03382ad7ab61':
  Set CQM clock depending on the qos mode and link speed
  GSWIP shortcut mode changed to bitmap
  GSWIP Shortcut Mode implemented, Xpcs Power Save mode for 10mW implemented
---
 drivers/net/ethernet/lantiq/cqm/cqm_dev.c          | 19 +++++++-------
 drivers/net/ethernet/lantiq/cqm/cqm_dev.h          |  1 +
 drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c     | 29 +++++++++++++++++++---
 drivers/net/ethernet/lantiq/cqm/falconmx/cqm.h     |  7 ++++++
 .../net/ethernet/lantiq/switch-api/gsw_defconf.c   | 27 ++++++++++++++++----
 .../net/ethernet/lantiq/switch-api/gsw_flow_core.h |  1 +
 .../ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c | 26 +++++++++++++------
 drivers/net/ethernet/lantiq/xpcs/xpcs.c            | 16 +++++++++++-
 drivers/net/ethernet/lantiq/xpcs/xpcs.h            |  3 +++
 include/net/switch_api/gsw_dev.h                   |  3 +++
 10 files changed, 106 insertions(+), 26 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/cqm/cqm_dev.c b/drivers/net/ethernet/lantiq/cqm/cqm_dev.c
index 39e2e7a84786..0faf028670e4 100644
--- a/drivers/net/ethernet/lantiq/cqm/cqm_dev.c
+++ b/drivers/net/ethernet/lantiq/cqm/cqm_dev.c
@@ -17,7 +17,7 @@ struct device_node *parse_dts(int j, void **pdata, struct resource **res,
 			      int *num_res)
 {
 	struct device_node *node = NULL, *cpu_deq_port = NULL;
-	struct device_node *ret_node = NULL;
+	struct device_node *ret_node = NULL, *gsw_node = NULL;
 	int idx = 0;
 	struct cqm_data *cqm_pdata = NULL;
 	unsigned int intr[MAX_NUM_INTR];
@@ -67,17 +67,9 @@ struct device_node *parse_dts(int j, void **pdata, struct resource **res,
 						   GFP_KERNEL);
 	memcpy(cqm_pdata->intrs, intr, (sizeof(unsigned int) * idx));
 	cqm_pdata->rcu_reset = of_reset_control_get(node, "cqm");
-	if (IS_ERR(cqm_pdata->rcu_reset)) {
+	if (IS_ERR(cqm_pdata->rcu_reset))
 		pr_err("No rcu reset for %s\n", dev_node_name[j].node_name);
-		/*return PTR_ERR(cqm_pdata->rcu_reset)*/;
-	}
 
-	cqm_pdata->cqm_clk[0] = (void *)of_clk_get_by_name(node, "freq");
-	if (IS_ERR(cqm_pdata->cqm_clk[0]))
-		pr_err("Error getting freq clk\n");
-	cqm_pdata->cqm_clk[1] = (void *)of_clk_get_by_name(node, "cbm");
-	if (IS_ERR(cqm_pdata->cqm_clk[1]))
-		pr_err("Error getting cqm clk\n");
 	cqm_pdata->syscfg = syscon_regmap_lookup_by_phandle(node,
 							    "intel,syscon");
 	if (IS_ERR(cqm_pdata->syscfg)) {
@@ -114,6 +106,13 @@ struct device_node *parse_dts(int j, void **pdata, struct resource **res,
 	cqm_pdata->num_dq_port = count;
 
 	ret_node = node;
+	gsw_node = of_find_node_by_name(NULL, "gsw_core");
+	if (!gsw_node) {
+		pr_err("Unable to get node gsw_core\n");
+		return NULL;
+	}
+	cqm_pdata->gsw_mode = 0;
+	of_property_read_u32(gsw_node, "gsw_mode", &cqm_pdata->gsw_mode);
 	return ret_node;
 
 err_free_pdata:
diff --git a/drivers/net/ethernet/lantiq/cqm/cqm_dev.h b/drivers/net/ethernet/lantiq/cqm/cqm_dev.h
index 42d05c707b82..e702aaf1896d 100644
--- a/drivers/net/ethernet/lantiq/cqm/cqm_dev.h
+++ b/drivers/net/ethernet/lantiq/cqm/cqm_dev.h
@@ -45,5 +45,6 @@ struct cqm_data {
 	unsigned int pool_size[MAX_NUM_POOLS];
 	u32  dq_port[MAX_CPU_DQ_PORT_N_TYPE];
 	u32 num_dq_port;
+	u32 gsw_mode;
 };
 #endif
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
index 586533aae1ec..567fc765677d 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
+++ b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
@@ -3,6 +3,7 @@
 #include "../cqm_dev.h"
 #include <net/datapath_proc_api.h>
 #include <net/switch_api/gsw_flow_ops.h>
+#include <net/switch_api/gsw_dev.h>
 
 #define OWN_BIT  BIT(31)
 #define COMPLETE_BIT  BIT(30)
@@ -3612,7 +3613,8 @@ static int cqm_falconmx_probe(struct platform_device *pdev)
 	struct cqm_data *pdata = NULL;
 	const struct of_device_id *match;
 	u32 port_no, port_type;
-	int result;
+	int result, ret;
+	struct clk *cqm_clk;
 
 	memset(&cqm_dbg_cntrs, 0, sizeof(cqm_dbg_cntrs));
 	pdata = platform_get_drvdata(pdev);
@@ -3670,8 +3672,20 @@ static int cqm_falconmx_probe(struct platform_device *pdev)
 			cqm_ctrl->cbm_irq[i + 1] = 0;
 	}
 #ifndef CONFIG_USE_EMULATOR
-	cqm_ctrl->cbm_clk = pdata->cqm_clk[0];
-	clk_prepare_enable(pdata->cqm_clk[1]);
+	cqm_ctrl->cbm_clk = devm_clk_get(cqm_ctrl->dev, "freq");
+	if (IS_ERR(cqm_ctrl->cbm_clk)) {
+		ret = PTR_ERR(cqm_ctrl->cbm_clk);
+		dev_err(cqm_ctrl->dev, "failed to get cqm_ctrl->cqm:%d\n", ret);
+		return ret;
+	}
+	cqm_clk = devm_clk_get(cqm_ctrl->dev, "cbm");
+	if (IS_ERR(cqm_clk)) {
+		ret = PTR_ERR(cqm_clk);
+		dev_err(cqm_ctrl->dev, "failed to get cqm_clk:%d\n", ret);
+		return ret;
+	}
+	clk_prepare_enable(cqm_clk);
+	clk_prepare_enable(cqm_ctrl->cbm_clk);
 #endif
 	cqm_ctrl->syscfg = pdata->syscfg;
 	cqm_ctrl->force_xpcs = pdata->force_xpcs;
@@ -3765,6 +3779,15 @@ static int cqm_falconmx_probe(struct platform_device *pdev)
 	/* Enable all the LS interrupts */
 	ls_intr_ctrl(0xFF0000, cqm_ctrl->ls);
 	/*set the Ingress port delay before enqueue*/
+	switch (pdata->gsw_mode) {
+	case SHORT_QOS_10G:
+		clk_set_rate(cqm_ctrl->cbm_clk, 400000000);
+	break;
+	case FULL_QOS_1G:
+	case SHORT_QOS_1G:
+		clk_set_rate(cqm_ctrl->cbm_clk, 250000000);
+	break;
+	};
 	dev_info(cqm_ctrl->dev, "CBM Clock: %ldHz\n",
 		 clk_get_rate(cqm_ctrl->cbm_clk));
 
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.h b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.h
index d73482010ab3..9688ca9be82e 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.h
+++ b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.h
@@ -162,6 +162,13 @@ enum CQM_BUFF_SIZE {
 	CQM_SIZE3_BUF_SIZE,
 };
 
+enum CQM_QOS_LINK_MODE {
+	FULL_QOS_10G = 0,
+	SHORT_QOS_10G,
+	FULL_QOS_1G,
+	SHORT_QOS_1G,
+};
+
 /**************************************************
  *
  * Macros
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c b/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c
index e0edd87db18f..25b441b94c4d 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c
@@ -78,6 +78,7 @@ int gsw_set_def_pce_qmap(struct core_ops *ops)
 {
 	int i = 0, j = 0;
 	GSW_QoS_queuePort_t q_map;
+	ethsw_api_dev_t *gswdev = GSW_PDATA_GET(ops);
 	int num_of_elem =
 		(sizeof(gsw_pce_path) / sizeof(struct _gsw_pce_path));
 
@@ -87,12 +88,28 @@ int gsw_set_def_pce_qmap(struct core_ops *ops)
 			memset(&q_map, 0, sizeof(GSW_QoS_queuePort_t));
 			q_map.nPortId = gsw_pce_path[j].eg_lpid;
 
+			if ((gswdev->gsw_mode & BIT(0)) == GSW_SHORTCUT_MODE) {
+				if (q_map.nPortId == LOG_3) {
+					q_map.nQueueId = 0;	/* Use Q0 */
+					q_map.nRedirectPortId = LOG_3;
+				} else if (q_map.nPortId == LOG_4) {
+					q_map.nQueueId = 8;	/* Use Q8 */
+					q_map.nRedirectPortId = LOG_4;
+				} else {
+					q_map.nQueueId = gsw_pce_path[j].qid;
+					q_map.nRedirectPortId =
+						gsw_pce_path[j].redir_lpid;
+				}
+			} else {
+				q_map.nQueueId = gsw_pce_path[j].qid;
+				q_map.nRedirectPortId =
+					gsw_pce_path[j].redir_lpid;
+			}
+
 			if (gsw_pce_path[j].ext != X)
 				q_map.bExtrationEnable = gsw_pce_path[j].ext;
 
 			q_map.nTrafficClassId = i;
-			q_map.nQueueId = gsw_pce_path[j].qid;
-			q_map.nRedirectPortId = gsw_pce_path[j].redir_lpid;
 
 			ops->gsw_qos_ops.QoS_QueuePortSet(ops, &q_map);
 		}
@@ -212,12 +229,12 @@ int gsw_misc_config(struct core_ops *ops)
 	GSW_register_t reg;
 	ethsw_api_dev_t *gswdev = GSW_PDATA_GET(ops);
 	int i = 0;
-	
-	/* Ignore Undersized frames and forward to CPU for the MAC ports 
+
+	/* Ignore Undersized frames and forward to CPU for the MAC ports
 	 * MAC logical ports start from 2
 	 */
 	for (i = 0; i < gswdev->pnum; i++) {
-		reg.nRegAddr = ((SDMA_PRIO_USIGN_OFFSET + (2*6)) + (i * 6));
+		reg.nRegAddr = ((SDMA_PRIO_USIGN_OFFSET + (2 * 6)) + (i * 6));
 		ops->gsw_common_ops.RegisterGet(ops, &reg);
 
 		reg.nData |= (1 << SDMA_PRIO_USIGN_SHIFT);
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
index 460daeead0ef..acecda3b3155 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
@@ -965,6 +965,7 @@ typedef struct {
 	u32	gswex_sgmiibase; 		/*Base address GSWIP External switch-SGMII */
 
 	void *gsw_base;  			/*Base address GSWITCH */
+	u32 gsw_mode;			/* GSWIP Mode 0 "short_cut", 1 "full_qos" */
 
 #ifdef __KERNEL__
 	spinlock_t lock_pce;
diff --git a/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c b/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
index a316d213d697..721f212adf52 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
@@ -285,14 +285,26 @@ static int gsw_add_switchdev(struct gsw_cell *gsw_dev_cell, u32 devid)
 
 	of_irq_to_resource_table(gsw_dev_cell->of_node, &irqres, 1);
 	switch_pdata->irq_num = irqres.start;
-	
-	if(devid == LTQ_FLOW_DEV_INT_R) {
-		of_property_read_u32(gsw_dev_cell->of_node,EXTERNAL_SWITCH_DEVID,&switch_pdata->ext_devid);
-		of_property_read_u32(gsw_dev_cell->of_node,EXTERNAL_SWITCH_PHYID,&switch_pdata->ext_phyid);
-		of_property_read_u32(gsw_dev_cell->of_node,EXTERNAL_SWITCH_BASEADDR,&switch_pdata->gswex_base);
-		of_property_read_u32(gsw_dev_cell->of_node,EXTERNAL_SWITCH_SGMIIBASEADDR,&switch_pdata->gswex_sgmiibase);
+
+
+	if (devid == LTQ_FLOW_DEV_INT_R) {
+		of_property_read_u32(gsw_dev_cell->of_node,
+				     EXTERNAL_SWITCH_DEVID,
+				     &switch_pdata->ext_devid);
+		of_property_read_u32(gsw_dev_cell->of_node,
+				     EXTERNAL_SWITCH_PHYID,
+				     &switch_pdata->ext_phyid);
+		of_property_read_u32(gsw_dev_cell->of_node,
+				     EXTERNAL_SWITCH_BASEADDR,
+				     &switch_pdata->gswex_base);
+		of_property_read_u32(gsw_dev_cell->of_node,
+				     EXTERNAL_SWITCH_SGMIIBASEADDR,
+				     &switch_pdata->gswex_sgmiibase);
 	}
 
+	of_property_read_u32(gsw_dev_cell->of_node, "gsw_mode",
+			     &switch_pdata->gsw_mode);
+
 #ifndef CONFIG_OF
 
 	if (gsw_dev[devid].prod_id == GRX500) {
@@ -335,7 +347,7 @@ static int update_gsw_dev_cell(struct device_node *np,
 	if (ret)
 		goto failed;
 
-	strncpy(gsw_dev_cells[idx].name, np->name, 
+	strncpy(gsw_dev_cells[idx].name, np->name,
 		(ARRAY_SIZE(gsw_dev_cells[idx].name) - 1));
 
 	gsw_dev_cells[idx].of_node = np;
diff --git a/drivers/net/ethernet/lantiq/xpcs/xpcs.c b/drivers/net/ethernet/lantiq/xpcs/xpcs.c
index b45ef8ce2add..ea0f81b246d1 100644
--- a/drivers/net/ethernet/lantiq/xpcs/xpcs.c
+++ b/drivers/net/ethernet/lantiq/xpcs/xpcs.c
@@ -30,6 +30,7 @@
 #define XPCS_CONN_TYPE "xpcs-conn"
 #define XPCS_MODE_NAME "xpcs-mode"
 #define XPCS_RESET_NAME "xpcs_reset"
+#define POWER_SAVE_MODE "power-save"
 
 static void xpcs_cl37_an(struct xpcs_prv_data *pdata);
 static void xpcs_cl73_an(struct xpcs_prv_data *pdata);
@@ -358,7 +359,7 @@ static void xpcs_cfg_table(struct xpcs_prv_data *pdata)
 {
 	u32 mplla_ctrl2 = 0;
 	u32 tx_eq0, tx_eq1;
-	u32 val = 0;
+	u32 val = 0, i = 0;
 
 	if (pdata->mpllb) {
 		XPCS_RGWR_VAL(pdata, PMA_MPLLB_C0, MPLLB_MULTIPLIER,
@@ -374,6 +375,12 @@ static void xpcs_cfg_table(struct xpcs_prv_data *pdata)
 			      pdata->mode_cfg->mplla_bw);
 	}
 
+	/* In Power save mode below setting will save 10mW of Power */
+	if (pdata->power_save) {
+		for (i = 0; i < LANE_MAX - 1; i++)
+			pdata->mode_cfg->tx_iboost[i] = 0x3;
+	}
+
 	switch (pdata->mode_cfg->lane) {
 	case LANE_4:
 		XPCS_RGWR_VAL(pdata, PMA_VCO_CAL_LD3, VCO_LD_VAL_3,
@@ -920,6 +927,13 @@ static int xpcs_parse_dts(struct platform_device *pdev,
 		return -EINVAL;
 	}
 
+	if (!device_property_read_u32(dev, POWER_SAVE_MODE, &prop)) {
+		(*pdata)->power_save = prop;
+	} else {
+		dev_err(dev, "Xpcs conn: cannot get property\n");
+		return -EINVAL;
+	}
+
 	platform_set_drvdata(pdev, (void *)(*pdata));
 
 	return XPCS_SUCCESS;
diff --git a/drivers/net/ethernet/lantiq/xpcs/xpcs.h b/drivers/net/ethernet/lantiq/xpcs/xpcs.h
index 22d097bea96a..e6b344ac8b70 100644
--- a/drivers/net/ethernet/lantiq/xpcs/xpcs.h
+++ b/drivers/net/ethernet/lantiq/xpcs/xpcs.h
@@ -675,6 +675,9 @@ struct xpcs_prv_data {
 	/* Connection Type SFP or PHY */
 	u32 conntype;
 
+	/* Power save mode 0 - Normal Mode, 1 - power save mode */
+	u8 power_save;
+
 	/* XPCS Mode Switching */
 	struct xpcs_mode_cfg *mode_cfg;
 };
diff --git a/include/net/switch_api/gsw_dev.h b/include/net/switch_api/gsw_dev.h
index 429282b3b935..bb431ecee14c 100644
--- a/include/net/switch_api/gsw_dev.h
+++ b/include/net/switch_api/gsw_dev.h
@@ -22,6 +22,9 @@
 #define MAC_DEV_NAME		"gsw_mac"
 #define CORE_DEV_NAME		"gsw_core"
 
+#define GSW_SHORTCUT_MODE	1
+#define GSW_FULLQOS_MODE	0
+
 /* This represents the GSWIP SubSystem block, one instance per SubSystem
  * For xrx500 GSWIP-L device ID is 0
  * For xrx500 GSWIP-R device ID is 1
