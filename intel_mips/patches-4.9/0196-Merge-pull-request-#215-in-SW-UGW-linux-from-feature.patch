From 046d529c723e2eb52c61ce1e5746267cd10affdc Mon Sep 17 00:00:00 2001
From: CI Assistant <yossi.ilkanaev@intel.com>
Date: Mon, 8 Oct 2018 15:28:45 +0200
Subject: [PATCH] Merge pull request #215 in SW_UGW/linux from
 feature/DRVLIB_SW-944-workaround-wrong-bm-pool-info-one-policy-pool to master

* commit '9d78ac0a70baea75f916ba39f01ec2de0e98622b':
  Checkpatch fixes
  modify the offset in headroom to get NET IP aligned, alloc and free from cpu using base addr to workaround the offset > 64 issue
  Support 1 pool policy workaround
---
 drivers/net/ethernet/lantiq/cqm/cqm_common.h       |  2 +-
 drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c     | 49 +++++++++++++---------
 .../net/ethernet/lantiq/cqm/falconmx/cqm_config.c  | 12 ++++--
 .../net/ethernet/lantiq/cqm/falconmx/cqm_config.h  |  3 +-
 4 files changed, 41 insertions(+), 25 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/cqm/cqm_common.h b/drivers/net/ethernet/lantiq/cqm/cqm_common.h
index 51435a12b203..ab41357c5904 100644
--- a/drivers/net/ethernet/lantiq/cqm/cqm_common.h
+++ b/drivers/net/ethernet/lantiq/cqm/cqm_common.h
@@ -13,7 +13,7 @@
 #define LS_PORT_NUM             4
 #define CBM_MAX_INT_LINES       8
 #define CBM_DMA_DESC_OWN        1U/*belong to DMA*/
-#define CBM_DMA_DATA_OFFSET     122
+#define CBM_DMA_DATA_OFFSET     128
 /* TCP lite and LRO expects it to be 128 */
 #define CBM_GRX550_DMA_DATA_OFFSET     128
 #define DEFAULT_WAIT_CYCLES     20
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
index 2dbac62f6a87..586533aae1ec 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
+++ b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
@@ -31,7 +31,7 @@ static struct cbm_q_info  cbm_qtable[MAX_QOS_QUEUES] = { {0} };
 static spinlock_t cqm_qidt_lock;
 static spinlock_t cqm_port_map;
 static spinlock_t cpu_pool_enq;
-static struct bmgr_policy_params p_param[CQM_FMX_NUM_BM_POLICY];
+static struct bmgr_policy_params p_param[CQM_FMX_MAX_BM_POLICY];
 
 LIST_HEAD(pmac_mapping_list);
 static struct cqm_ctrl *cqm_ctrl;
@@ -60,14 +60,14 @@ struct cqm_buf_dbg_cnt cqm_dbg_cntrs[CQM_MAX_POLICY_NUM][CQM_MAX_POOL_NUM];
 
 static int get_buff_resv_bytes(int cbm_inst, int size)
 {
-	int bsl_thr_val = 0;
+	int bsl_thr_val = 0x2800;
 
 	dev_info(cqm_ctrl->dev, "BSL thres %d size %d\n", BSL_THRES, size);
 
-	if (size < CQM_FMX_NUM_BM_POOLS)
+	if (size < cqm_ctrl->num_pools)
 		bsl_thr_val = cqm_ctrl->fmx_pool_size[size] - BSL_THRES;
 	else
-		dev_err(cqm_ctrl->dev, "%s: unsupported size %d\n", __func__,
+		dev_dbg(cqm_ctrl->dev, "%s: unsupported size %d\n", __func__,
 			size);
 	return bsl_thr_val;
 }
@@ -1428,6 +1428,7 @@ static void *cqm_buff_alloc_by_policy_fmx(u32 pid, u32 flag, u32 policy)
 	u8 *v_buf;
 	u32 pool_t;
 	u32 policy_t;
+	u32 buff_base, buff_size, index;
 
 	if (pid >= CPU_EQM_PORT_NUM) {
 		dev_err(cqm_ctrl->dev, "illegal pid: %d\n", pid);
@@ -1462,11 +1463,12 @@ static void *cqm_buff_alloc_by_policy_fmx(u32 pid, u32 flag, u32 policy)
 	}
 	local_irq_restore(sys_flag);
 	v_buf = __va(buf_addr);
+	get_buffer_base_index(v_buf, &buff_base, &buff_size, &index);
 	pool_t = bm_pool_conf[j].pool;
 	policy_t = bm_pool_conf[j].policy;
-	add_metadata(v_buf, pool_t, policy_t);
+	add_metadata(buff_base, pool_t, policy_t);
 	UP_STATS(cqm_dbg_cntrs[policy_t][pool_t].alloc_cnt);
-	return (void *)v_buf + CQM_POOL_METADATA;
+	return (void *)buff_base + CQM_POOL_METADATA;
 }
 
 static void *cqm_buffer_alloc(u32 pid, u32 flag, u32 size, u32 *buf_size)
@@ -1478,16 +1480,17 @@ static void *cqm_buffer_alloc(u32 pid, u32 flag, u32 size, u32 *buf_size)
 	u32 segment_mask = 0;
 	u32 pool_t;
 	u32 policy_t;
+	u32 buff_base, buff_size, index;
 
 	if (pid >= CPU_EQM_PORT_NUM) {
 		dev_err(cqm_ctrl->dev, "illegal pid: %d\n", pid);
 		return NULL;
 	}
-	if (size > bm_pool_conf[CQM_FMX_NUM_BM_POOLS - 1].buf_frm_size) {
+	if (size > bm_pool_conf[cqm_ctrl->num_pools - 1].buf_frm_size) {
 		dev_err(cqm_ctrl->dev, "Invalid size requested: %d\n", size);
 		return NULL;
 	}
-	while (j < CQM_FMX_NUM_BM_POOLS) {
+	while (j < cqm_ctrl->num_pools) {
 		if (size <= bm_pool_conf[j].buf_frm_size) {
 			*buf_size = bm_pool_conf[j].buf_frm_size;
 			segment_mask = bm_pool_conf[j].segment_mask;
@@ -1495,7 +1498,7 @@ static void *cqm_buffer_alloc(u32 pid, u32 flag, u32 size, u32 *buf_size)
 		}
 		j++;
 	}
-	if (j >= CQM_FMX_NUM_BM_POOLS) {
+	if (j >= cqm_ctrl->num_pools) {
 		dev_err(cqm_ctrl->dev,
 			"Req Buff size exceeds the max available\n");
 		return NULL;
@@ -1522,8 +1525,9 @@ static void *cqm_buffer_alloc(u32 pid, u32 flag, u32 size, u32 *buf_size)
 	UP_STATS(cqm_dbg_cntrs[policy_t][pool_t].alloc_cnt);
 	local_irq_restore(sys_flag);
 	v_buf_addr = (uint8_t *)__va(buf_addr);
-	add_metadata(v_buf_addr, pool_t, policy_t);
-	return (void *)v_buf_addr + CQM_POOL_METADATA;
+	get_buffer_base_index(v_buf_addr, &buff_base, &buff_size, &index);
+	add_metadata(buff_base, pool_t, policy_t);
+	return (void *)buff_base + CQM_POOL_METADATA;
 }
 
 static void *cqm_buffer_alloc_by_size(u32 pid, u32 flag, u32 size)
@@ -2143,10 +2147,15 @@ static s32 dp_enable(struct module *owner, u32 port_id,
 			if (ops)
 				ops->gsw_pmac_ops.Pmac_Gbl_CfgGet(ops,
 						&glbl_cfg);
-			glbl_cfg.nMaxJumboLen = get_buff_resv_bytes(0, 3);
-			glbl_cfg.nBslThreshold[0] = get_buff_resv_bytes(0, 0);
-			glbl_cfg.nBslThreshold[1] = get_buff_resv_bytes(0, 1);
-			glbl_cfg.nBslThreshold[2] = get_buff_resv_bytes(0, 2);
+			val = get_buff_resv_bytes(0, 3);
+			glbl_cfg.nMaxJumboLen = val;
+			val = get_buff_resv_bytes(0, 0);
+			glbl_cfg.nBslThreshold[0] = val;
+			val = get_buff_resv_bytes(0, 1);
+			glbl_cfg.nBslThreshold[1] = val;
+			val = get_buff_resv_bytes(0, 2);
+			glbl_cfg.nBslThreshold[2] = val;
+
 			if (ops)
 				ops->gsw_pmac_ops.Pmac_Gbl_CfgSet(ops,
 						&glbl_cfg);
@@ -2914,7 +2923,7 @@ static int bm_init(struct platform_device *pdev)
 	u32 buf_size;
 	u32 start_low;
 
-	for (i = 0; i < CQM_FMX_NUM_BM_POOLS; i++) {
+	for (i = 0; i < cqm_ctrl->num_pools; i++) {
 		result = pool_config(pdev, i, cqm_ctrl->fmx_pool_size[i],
 				     cqm_ctrl->fmx_pool_ptrs[i]);
 		if (result)
@@ -2923,7 +2932,7 @@ static int bm_init(struct platform_device *pdev)
 
 	bmgr_driver_init();
 
-	for (i = 0; i < CQM_FMX_NUM_BM_POOLS; i++) {
+	for (i = 0; i < cqm_ctrl->num_pools; i++) {
 		p_params.group_id = 0;
 		p_params.num_buffers = bm_pool_conf[i].buf_frm_num;
 		p_params.size_of_buffer = bm_pool_conf[i].buf_frm_size;
@@ -3387,6 +3396,8 @@ static int conf_enq_dma_port(const struct eqm_dma_port *dma_ptr)
 	void *dmadesc = cqm_ctrl->dmadesc;
 
 	j = 0;
+	if ((cqm_ctrl->num_pools + 1) < range)
+		range = cqm_ctrl->num_pools + 1;
 	while (j < range) {
 		index = port + j;
 		p_info = &eqm_port_info[index];
@@ -3543,7 +3554,7 @@ static int conf_bm(struct cqm_data *pdata)
 		, sizeof(cqm_ctrl->fmx_pool_ptrs));
 	memcpy(cqm_ctrl->fmx_pool_size, pdata->pool_size
 		, sizeof(cqm_ctrl->fmx_pool_size));
-
+	cqm_ctrl->num_pools = pdata->num_pools;
 	/* Pool Index loop*/
 	for (i = 0; i < pdata->num_pools; i++) {
 		/* Validate pool and policy */
@@ -3666,7 +3677,7 @@ static int cqm_falconmx_probe(struct platform_device *pdev)
 	cqm_ctrl->force_xpcs = pdata->force_xpcs;
 
 	/* check fmx pool and policy */
-	if (pdata->num_pools != CQM_FMX_NUM_BM_POOLS) {
+	if (pdata->num_pools > CQM_FMX_NUM_BM_POOLS) {
 		pr_err("fmx pools %u\n", pdata->num_pools);
 		return CBM_FAILURE;
 	}
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c
index a188de309344..94e2d80602fd 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c
+++ b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c
@@ -8,28 +8,32 @@ struct cqm_bm_pool_config bm_pool_conf[CQM_FMX_NUM_POOLS] = {
 	.segment_mask = 0xFFFFF800,
 	.offset_mask = 0x7ff,
 	.pool = 0,
-	.policy = 0
+	.policy = 0,
+	.buf_frm_size_reg = 7
 	},
 	{
 	.buf_type = REQ_SIZE1_BUF,
 	.segment_mask = 0xFFFFF800,
 	.offset_mask = 0x7ff,
 	.pool = 1,
-	.policy = 1
+	.policy = 1,
+	.buf_frm_size_reg = 7
 	},
 	{
 	.buf_type = REQ_SIZE2_BUF,
 	.segment_mask = 0xFFFFF800,
 	.offset_mask = 0x7ff,
 	.pool = 2,
-	.policy = 2
+	.policy = 2,
+	.buf_frm_size_reg = 7
 	},
 	{
 	.buf_type = REQ_SIZE3_BUF,
 	.segment_mask = 0xFFFFF800,
 	.offset_mask = 0x7ff,
 	.pool = 3,
-	.policy = 3
+	.policy = 3,
+	.buf_frm_size_reg = 7
 	},
 	{
 	.buf_frm_size = CQM_SRAM_FRM_SIZE,
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.h b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.h
index d2307f74380f..8ece0cd9ecd3 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.h
+++ b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.h
@@ -21,7 +21,8 @@
 #define FMX_MAX_PORT_PER_EP 1
 #define FMX_MAX_PORT_MAP 2
 #define FMX_MAX_PON_PORTS 64
-#define CQM_FMX_NUM_BM_POLICY 4
+#define CQM_FMX_NUM_BM_POLICY 1
+#define CQM_FMX_MAX_BM_POLICY 4
 #define FMX_SKB_PTR_SIZE 4
 #define FMX_WAN_AON_MODE BIT(0)
 #define FMX_WAN_PON_MODE 0
