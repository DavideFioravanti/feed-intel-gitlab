From 74e5aed4e0ab887716717e4c716d0af66c2b064f Mon Sep 17 00:00:00 2001
From: CI Assistant <yossi.ilkanaev@intel.com>
Date: Fri, 11 Jan 2019 11:48:46 +0100
Subject: [PATCH] Merge pull request #342 in SW_UGW/linux from
 feature/PONRTSYS-2727-uni-port-dynamic-serdes-xpcs-configuration to master

* commit '11c4acfd719606b25c2232df4e4f1d01b70a01fa':
  Compilation issue fix for GRX500
  Check to make compilation pass for GRX500
  Remove phy_gate_clk_disable and phy_freq_clk_disable while phy power off, otherwise LAN0 and LAN1 cannot reinitialize
  Corrected the review comments
  Xpcs Power Good state changed to pr_debug
  Relationship between Ethernet Driver -> Xgmac -> Xpcs added
  Update review comments
  PONRTSYS-2727: dynamic-serdes-xpcs-configuration for 10G and 1G
  Updates for Xpcs restart
---
 drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c |  89 ++++++++++++--
 drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.h |   1 +
 drivers/net/ethernet/lantiq/xpcs/xpcs.c          | 141 ++++++++++++++++++++---
 drivers/net/ethernet/lantiq/xpcs/xpcs.h          |  13 +++
 drivers/phy/intel/phy-intel-combo.c              |   2 -
 5 files changed, 216 insertions(+), 30 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
index a10b52008274..e89c7fe05927 100644
--- a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
+++ b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
@@ -33,6 +33,7 @@
 #include <net/switch_api/gsw_dev.h>
 #include "xrx500_phy_fw.h"
 #include "ltq_eth_drv_xrx500.h"
+#include "xpcs/xpcs.h"
 
 #define LTQ_ETH_MAX_DATA_LEN 9000
 
@@ -255,7 +256,55 @@ static int  ethtool_eee_set(struct net_device *dev,
 	return retval;
 }
 
-/* Structure of the ether tool operation  */
+int serdes_ethtool_get_link_ksettings(struct net_device *dev,
+				   struct ethtool_link_ksettings *cmd)
+{
+	struct ltq_eth_priv *priv = netdev_priv(dev);
+	struct platform_device *pdev;
+	int ret = 0;
+
+	if (!priv->xpcs_node)
+		return -1;
+
+        pdev = of_find_device_by_node(priv->xpcs_node);
+        if (pdev) {
+#ifdef CONFIG_INTEL_XPCS
+            /* Speed Get in Ethtool */
+            xpcs_ethtool_ksettings_get(&pdev->dev, cmd);
+#endif
+        } else {
+            pr_err("Cannot get Xpcs pdev for %s\n",dev->name);
+            ret = -1;
+        }
+        return ret;
+}
+
+int serdes_ethtool_set_link_ksettings(struct net_device *dev,
+				   const struct ethtool_link_ksettings *cmd)
+{
+	struct ltq_eth_priv *priv = netdev_priv(dev);
+	int ret = 0;
+	struct platform_device *pdev;
+
+	if (!priv->xpcs_node)
+		return -1;
+
+        /* Speed Set in Ethtool */
+        pdev = of_find_device_by_node(priv->xpcs_node);
+        if (pdev) {
+#ifdef CONFIG_INTEL_XPCS
+            /* Speed Get in Ethtool */
+            ret = xpcs_ethtool_ksettings_set(&pdev->dev, cmd);
+#endif
+        } else {
+            pr_err("Cannot get Xpcs pdev for %s\n",dev->name);
+            ret = -1;
+        }
+
+        return ret;
+}
+
+/* Structure of the ether tool operation in Phy case  */
 static const struct ethtool_ops ethtool_ops = {
 	.get_drvinfo		= get_drvinfo,
 	.get_settings		= get_settings,
@@ -268,6 +317,13 @@ static const struct ethtool_ops ethtool_ops = {
 	.set_eee		= ethtool_eee_set,
 };
 
+/* Structure of the ether tool operation in No-Phy case */
+static const struct ethtool_ops serdes_ethtool_ops = {
+	.get_drvinfo		= get_drvinfo,
+	.get_link_ksettings	= serdes_ethtool_get_link_ksettings,
+	.set_link_ksettings	= serdes_ethtool_set_link_ksettings,
+};
+
 /* open the network device interface*/
 static int ltq_eth_open(struct net_device *dev)
 {
@@ -715,9 +771,14 @@ static int ltq_eth_init(struct net_device *dev)
 		else if (g_soc_data.phy_connect_func(dev, &priv->port[i]))
 			pr_warn("connect phy of port %d failed\n",
 				priv->port[i].num);
+
 		dev->ethtool_ops = &ethtool_ops;
 	}
 
+	if (!priv->port[i].phy_node) {
+		dev->ethtool_ops = &serdes_ethtool_ops;
+	}
+
 	if (priv->lct_en == 1) {
 		priv->dp_subif.subif = -1;
 		priv->dp_subif.port_id = priv->dp_port_id;
@@ -1387,7 +1448,7 @@ static int xrx500_of_iface(struct xrx500_hw *hw, struct device_node *iface,
 {
 	struct ltq_eth_priv *priv;
 	struct dp_dev_data dev_data = {0};
-	struct device_node *port;
+	struct device_node *port, *mac_np;
 	const __be32 *wan;
 	u32 dp_dev_port_param, dp_port_id_param, xgmac_id_param;
 	u32 lct_en_param = 0, extra_subif_param = 0;
@@ -1439,14 +1500,24 @@ static int xrx500_of_iface(struct xrx500_hw *hw, struct device_node *iface,
 		return ret;
 	}
 
-	ret = of_property_read_u32(iface, "intel,xgmac-id",
-				   &xgmac_id_param);
-	if (ret < 0) {
-		pr_debug("Property intel,xgmac-id not exist for if %s\n",
-			 name);
-		priv->xgmac_id = -1;
-	} else {
+	priv->xgmac_id = -1;
+
+	mac_np = of_parse_phandle(iface, "mac", 0);	
+	if (mac_np) {
+		ret = of_property_read_u32(mac_np, "mac_idx", &xgmac_id_param);
+		if (ret < 0) {
+			pr_info("ERROR : Property mac_idx not read from DT for if %s\n",
+				name);
+			return ret;
+		}
+
 		priv->xgmac_id = xgmac_id_param;
+		
+		priv->xpcs_node = of_parse_phandle(mac_np, "xpcs", 0);
+		if (!priv->xpcs_node) {
+			pr_info("Cannot get xpcs node\n");
+			return -EINVAL;			
+		}
 	}
 
 	ret = of_property_read_u32(iface, "intel,lct-en",
diff --git a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.h b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.h
index 60646e649cc9..52117b690b33 100644
--- a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.h
+++ b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.h
@@ -66,6 +66,7 @@ struct ltq_eth_priv {
 	s32 f_dp;   /* status for register to datapath*/
 	u32 dp_port_id;
 	int xgmac_id;
+	struct device_node *xpcs_node;
 	struct xrx500_port port[NUM_ETH_INF];
 	int num_port;
 	struct xrx500_hw				*hw;
diff --git a/drivers/net/ethernet/lantiq/xpcs/xpcs.c b/drivers/net/ethernet/lantiq/xpcs/xpcs.c
index ea0f81b246d1..2e5ea2a85dc5 100644
--- a/drivers/net/ethernet/lantiq/xpcs/xpcs.c
+++ b/drivers/net/ethernet/lantiq/xpcs/xpcs.c
@@ -22,6 +22,7 @@
 #include <linux/phy/phy.h>
 #include <linux/reset.h>
 #include "xpcs.h"
+#include <linux/netdevice.h>
 
 #define MAX_BUSY_RETRY	2000
 #define XPCS_IRQ_NAME "xpcs_irq"
@@ -31,6 +32,7 @@
 #define XPCS_MODE_NAME "xpcs-mode"
 #define XPCS_RESET_NAME "xpcs_reset"
 #define POWER_SAVE_MODE "power-save"
+#define XPCS_MAC_IDX	"mac_idx"
 
 static void xpcs_cl37_an(struct xpcs_prv_data *pdata);
 static void xpcs_cl73_an(struct xpcs_prv_data *pdata);
@@ -187,9 +189,16 @@ static int xpcs_rxtx_stable(struct xpcs_prv_data *pdata)
 		pseq_state = XPCS_RGRD_VAL(pdata, PCS_DIG_STS, PSEQ_STATE);
 
 		if (pseq_state == 4) {
-			dev_info(pdata->dev,
-				 "%s: Tx/Rx stable (Power_Good State)\n",
-				 pdata->name);
+			if (pdata->mode == TENG_KR_MODE)
+				pr_debug("%s: Tx/Rx stable (Power_Good State) "
+					"Speed: 10G\n", pdata->name);
+			else if (pdata->mode == ONEG_XAUI_MODE)
+				pr_debug("%s: Tx/Rx stable (Power_Good State) "
+					"Speed: 1G\n", pdata->name);
+			else if (pdata->mode == TWOP5G_GMII_MODE)
+				pr_debug("%s: Tx/Rx stable (Power_Good State) "
+					"Speed: 2.5G\n", pdata->name);
+
 			break;
 		}
 
@@ -873,11 +882,6 @@ static int xpcs_init(struct xpcs_prv_data *pdata)
 		return -EINVAL;
 	}
 
-	if (xpcs_sysfs_init(pdata)) {
-		dev_dbg(pdata->dev, "%s: sysfs init failed!\n", pdata->name);
-		return -EINVAL;
-	}
-
 	return ret;
 }
 
@@ -902,7 +906,6 @@ static int xpcs_parse_dts(struct platform_device *pdev,
 	/* Retrieve the xpcs mode */
 	if (!device_property_read_u32(dev, XPCS_MODE_NAME, &prop)) {
 		(*pdata)->mode = prop;
-
 		if ((*pdata)->mode >= MAX_XPCS_MODE) {
 			dev_err(dev, "Xpcs mode: %u is invalid\n",
 				(*pdata)->mode);
@@ -948,28 +951,120 @@ static int xpcs_parse_dts(struct platform_device *pdev,
 }
 #endif
 
-static int xpcs_reset(struct platform_device *pdev)
+static int xpcs_reset(struct device *dev)
+{
+	struct xpcs_prv_data *pdata = dev_get_drvdata(dev);
+
+	reset_control_assert(pdata->xpcs_rst);
+	udelay(1);
+	reset_control_deassert(pdata->xpcs_rst);
+
+	return 0;
+}
+
+void xpcs_ethtool_ksettings_get(struct device *dev,
+				struct ethtool_link_ksettings *cmd)
+{
+	struct xpcs_prv_data *pdata = dev_get_drvdata(dev);
+
+	if (!pdata) {
+		pr_err("XPCS %s is not initialized\n",pdata->name);
+		return;
+	}
+
+	if (pdata->mode == TENG_KR_MODE)
+		cmd->base.speed = SPEED_10000;
+	else if (pdata->mode == ONEG_XAUI_MODE)
+		cmd->base.speed = SPEED_1000;
+
+	return;
+}
+EXPORT_SYMBOL(xpcs_ethtool_ksettings_get);
+
+int xpcs_ethtool_ksettings_set(struct device *dev,
+			       const struct ethtool_link_ksettings *cmd)
 {
-	struct reset_control *xpcs_rst;
+	u32 speed = cmd->base.speed;
+	u32 mode;
+	struct xpcs_prv_data *pdata = dev_get_drvdata(dev);
+
+	if (!pdata) {
+		pr_err("XPCS %s is not initialized\n",pdata->name);
+		return -1;
+	}
 
-	xpcs_rst = devm_reset_control_get(&pdev->dev, XPCS_RESET_NAME);
+	if (speed != SPEED_10000 &&
+	    speed != SPEED_1000)
+		return -EINVAL;
 
-	if (IS_ERR(xpcs_rst))
+	if (speed == SPEED_10000 && (pdata->mode != TENG_KR_MODE))
+		mode = TENG_KR_MODE;
+	else if (speed == SPEED_1000 && (pdata->mode != ONEG_XAUI_MODE))
+		mode = ONEG_XAUI_MODE;
+	else
 		return -1;
 
-	reset_control_assert(xpcs_rst);
-	udelay(1);
-	reset_control_deassert(xpcs_rst);
+	/* Restart Xpcs & PHY */
+	xpcs_reinit(pdata->dev, mode);
 
 	return 0;
 }
+EXPORT_SYMBOL(xpcs_ethtool_ksettings_set);
+
+int xpcs_reinit(struct device *dev, u32 mode)
+{
+	struct xpcs_prv_data *pdata = dev_get_drvdata(dev);
+	struct phy *phy = pdata->phy;
+	int ret = 0;
+
+	if (!dev || !phy) {
+		printk("Cannot get phy or dev\n");
+		return -1;
+	}
+
+	/* Xpcs reset assert */
+	reset_control_assert(pdata->xpcs_rst);
+
+	/* RCU reset PHY */
+	phy_power_off(phy);
+
+	/* Exit PHY */
+	phy_exit(phy);
+
+	/* Init PHY */
+	ret = phy_init(phy);
+
+	if (ret < 0) {
+		dev_dbg(dev, "phy_init err %s.\n", pdata->name);
+		return ret;
+	}
+
+	/* Power ON PHY */
+	phy_power_on(phy);
+
+	/* Xpcs reset deassert */
+	reset_control_deassert(pdata->xpcs_rst);
+
+	/* Change mode to new mode */
+	pdata->mode = mode;
+
+	/* Power ON XPCS */
+	ret = xpcs_init(pdata);
+
+	if (ret < 0) {
+		dev_dbg(dev, "xpcs_init err %s.\n", pdata->name);
+		return ret;
+	}
+
+	return ret;
+}
 
 static int xpcs_probe(struct platform_device *pdev)
 {
 	struct resource *res;
-	struct xpcs_prv_data *pdata = NULL;
 	struct device *dev = &pdev->dev;
 	int ret = XPCS_SUCCESS;
+	struct xpcs_prv_data *pdata;
 
 	if (dev->of_node) {
 		if (xpcs_parse_dts(pdev, &pdata) != XPCS_SUCCESS) {
@@ -1028,7 +1123,12 @@ static int xpcs_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
-	if (xpcs_reset(pdev)) {
+	pdata->xpcs_rst = devm_reset_control_get(dev, XPCS_RESET_NAME);
+
+	if (IS_ERR(pdata->xpcs_rst))
+		return -1;
+
+	if (xpcs_reset(dev)) {
 		dev_err(dev, "Failed to do %s reset:\n", pdata->name);
 		return -EINVAL;
 	}
@@ -1039,7 +1139,10 @@ static int xpcs_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
-	dev_info(dev, "%s Initialized!!\n", pdata->name);
+	if (xpcs_sysfs_init(pdata)) {
+		dev_dbg(dev, "%s: sysfs init failed!\n", pdata->name);
+		return -EINVAL;
+	}
 
 	return XPCS_SUCCESS;
 }
diff --git a/drivers/net/ethernet/lantiq/xpcs/xpcs.h b/drivers/net/ethernet/lantiq/xpcs/xpcs.h
index e6b344ac8b70..56e9bd0166f1 100644
--- a/drivers/net/ethernet/lantiq/xpcs/xpcs.h
+++ b/drivers/net/ethernet/lantiq/xpcs/xpcs.h
@@ -2,6 +2,7 @@
 #define _XPCS_H_
 
 #include <linux/types.h>
+#include <linux/ethtool.h>
 
 #define XPCS_SUCCESS			0
 #define XPCS_FAILURE			-1
@@ -543,6 +544,8 @@
 #define PCS_DIG_STS_PSEQ_STATE_POS		2
 #define PCS_DIG_STS_PSEQ_STATE_WIDTH		3
 
+#define MAX_XPCS 				6
+
 enum {
 	BACKPL_ETH_PCS = 0,
 	OTHER_PCS_CONFIG = 1
@@ -678,6 +681,11 @@ struct xpcs_prv_data {
 	/* Power save mode 0 - Normal Mode, 1 - power save mode */
 	u8 power_save;
 
+	struct reset_control *xpcs_rst;
+
+	/* mac_idx where xpcs is connected */
+	u32 mac_idx;
+
 	/* XPCS Mode Switching */
 	struct xpcs_mode_cfg *mode_cfg;
 };
@@ -760,6 +768,11 @@ static inline void XPCS_RGWR(struct xpcs_prv_data *pdata, u32 reg, u32 val)
 	} while (0)
 
 int xpcs_sysfs_init(struct xpcs_prv_data *priv);
+void xpcs_ethtool_ksettings_get(struct device *dev,
+				struct ethtool_link_ksettings *cmd);
+int xpcs_ethtool_ksettings_set(struct device *dev,
+			       const struct ethtool_link_ksettings *cmd);
+int xpcs_reinit(struct device *dev, u32 mode);
 
 #endif
 
diff --git a/drivers/phy/intel/phy-intel-combo.c b/drivers/phy/intel/phy-intel-combo.c
index 9041633475e8..aa9d9a0e9bd9 100644
--- a/drivers/phy/intel/phy-intel-combo.c
+++ b/drivers/phy/intel/phy-intel-combo.c
@@ -419,8 +419,6 @@ static int intel_phy_power_off(struct phy_ctx *iphy)
 		return ret;
 	}
 
-	intel_phy_gate_clk_disable(iphy);
-	intel_phy_freq_clk_disable(iphy);
 	iphy->power_en = false;
 
 	return 0;
