From f82039d6373d858144ba8e5f579f3c9238c8dfb2 Mon Sep 17 00:00:00 2001
From: CI Assistant <yossi.ilkanaev@intel.com>
Date: Fri, 24 Aug 2018 14:31:08 +0200
Subject: [PATCH] Merge pull request #129 in SW_UGW/linux from
 UGW_SW-27225-container-acceleration-8.x to master

* commit '28c02bc52fcbc4afadaca969972555f0d1665af6':
  Add member in skb for tracking p_item when same skb traverses network stack twice. (Use case:- Container
---
 include/linux/skbuff.h     | 3 +++
 include/uapi/net/ppa_api.h | 3 +++
 net/core/skbuff.c          | 9 +++++++++
 3 files changed, 15 insertions(+)

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index f55a7967a273..8ef290c62277 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -804,6 +804,9 @@ struct sk_buff {
 #if defined(CONFIG_LTQ_CBM) || IS_ENABLED(CONFIG_DIRECTCONNECT_DP_API)
 	__u32 DW0, DW1, DW2, DW3;
 #endif
+#ifdef CONFIG_PPA
+	__u32			ptr_ppa_pitem;
+#endif
 
 	/* private: */
 	__u32			headers_end[0];
diff --git a/include/uapi/net/ppa_api.h b/include/uapi/net/ppa_api.h
index 311890cb80f1..6d2d578dc607 100755
--- a/include/uapi/net/ppa_api.h
+++ b/include/uapi/net/ppa_api.h
@@ -488,6 +488,9 @@
 #define SESSION_FLAG2_VALID_IPSEC_OUTBOUND_SA 0x00000100
 #define SESSION_FLAG2_VALID_IPSEC_OUTBOUND_LAN 0x00000200
 #define SESSION_FLAG2_VALID_L2_SNAT 0x00000400
+/* Container Session Flags */
+#define SESSION_FLAG2_VETH 0x00001000
+#define SESSION_FLAG2_CONTAINER 0x00002000
 /* Other flags */
 #define FLG_PPA_PROCESSED			0x100	/* this used to mark ecah packets which are processed by ppa datapath driver*/
 #define SESSION_FLAG_TC_REMARK		 0x40000000 /*Flag to sepcify bit 30 in extmark which specifies packet classified by iptables when set to 1*/
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index f2eacc510b5b..c2d9e2386f37 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -259,6 +259,9 @@ struct sk_buff *__alloc_skb(unsigned int size, gfp_t gfp_mask,
 	skb->data = data;
 	skb_reset_tail_pointer(skb);
 	skb->end = skb->tail + size;
+#ifdef CONFIG_PPA
+	skb->ptr_ppa_pitem = 0;
+#endif
 	skb->mac_header = (typeof(skb->mac_header))~0U;
 	skb->transport_header = (typeof(skb->transport_header))~0U;
 
@@ -721,6 +724,9 @@ void kfree_skb(struct sk_buff *skb)
 		smp_rmb();
 	else if (likely(!atomic_dec_and_test(&skb->users)))
 		return;
+#ifdef CONFIG_PPA
+	skb->ptr_ppa_pitem = 0;
+#endif
 	trace_kfree_skb(skb, __builtin_return_address(0));
 	__kfree_skb(skb);
 }
@@ -875,6 +881,9 @@ static void __copy_skb_header(struct sk_buff *new, const struct sk_buff *old)
 #ifdef CONFIG_NETWORK_EXTMARK
 	new->extmark	 = old->extmark;
 #endif
+#ifdef CONFIG_PPA
+	new->ptr_ppa_pitem = old->ptr_ppa_pitem;
+#endif
 	CHECK_SKB_FIELD(protocol);
 	CHECK_SKB_FIELD(csum);
 	CHECK_SKB_FIELD(hash);
