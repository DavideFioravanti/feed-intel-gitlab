From 1642f9aaa8c427cbf5a5d1e98583772b7bb33106 Mon Sep 17 00:00:00 2001
From: CI Assistant <yossi.ilkanaev@intel.com>
Date: Thu, 16 Aug 2018 13:34:32 +0200
Subject: [PATCH] Merge pull request #94 in SW_UGW/linux from
 PONRTSYS-1761-dp-manager-color-marking-and-meter-apis to master

* commit '39b2c8b03d9a59c4adc8070689092790077de269':
  include: tc_act: new tc action for color marking
  include: datapath: meter and TC force APIs
---
 include/net/datapath_api_qos.h         | 160 +++++++++++++++++++++++++++++++++
 include/net/tc_act/tc_colmark.h        |  42 +++++++++
 include/uapi/linux/tc_act/tc_colmark.h |  45 ++++++++++
 3 files changed, 247 insertions(+)

diff --git a/include/net/datapath_api_qos.h b/include/net/datapath_api_qos.h
index 339da0ee98fe..65ffa2767c3d 100644
--- a/include/net/datapath_api_qos.h
+++ b/include/net/datapath_api_qos.h
@@ -1082,6 +1082,166 @@ struct dp_qos_level {
  */
 int dp_qos_level_get(struct dp_qos_level *dp, int flag);
 
+/*! Enumeration for color marking mode for drop precedence selection */
+enum dp_col_marking {
+	/*!< Do not color mark */
+	DP_NO_MARKING,
+	/*!< Internal marking derives the color of the packet from internal
+	     data flow instead of using VLAN tag or DSCP */
+	DP_INTERNAL,
+	/*!< Drop eligible bit color marking */
+	DP_DEI,
+	/*!< No drop precedence in the PCP */
+	DP_PCP_8P0D,
+	/*!< PCP = 4 drop eligible */
+	DP_PCP_7P1D,
+	/*!< PCP = 4, 2 drop eligible */
+	DP_PCP_6P2D,
+	/*!< PCP = 4, 2, 0 drop eligible */
+	DP_PCP_5P3D,
+	/*!< Drop precedence according to RFC 2597 */
+	DP_DSCP_AF,
+};
+
+/*! Enumeration for selection of single or dual rate color marker */
+enum dp_meter_type {
+	/*!< RFC2697 color marker */
+	srTCM,
+	/*!< RFC4115 color marker */
+	trTCM,
+};
+
+/*! Enumeration for traffic types needed for flow and bridge meters config */
+enum dp_meter_traffic_type {
+	/*!< Unicast traffic with no destination address */
+	DP_UKNOWN_UNICAST,
+	/*!< Upstream multicast traffic */
+	DP_MULTICAST,
+	/*!< Upstream broadcast traffic */
+	DP_BROADCAST,
+};
+
+/*!
+* @struct dp_meter_cfg
+*
+* @brief This structure defines the exact meter configuration
+*
+*/
+struct dp_meter_cfg {
+	/*!< meter for ingressing traffic */
+#define DP_DIR_INGRESS 0
+	/*!< meter for egressing traffic */
+#define DP_DIR_EGRESS  1
+	/*!< Configure color marking only, no meter setup */
+#define DP_METER_COL_MARKING_ONLY	BIT(0)
+	/*!< Attach meter to PCE rule e.g., CPU traffic limiting */
+#define DP_METER_ATTACH_PCE		BIT(1)
+	/*!< Attach meter to CTP port */
+#define DP_METER_ATTACH_CTP		BIT(2)
+	/*!< Attach meter to bridge port */
+#define DP_METER_ATTACH_BRPORT		BIT(3)
+	/*!< Attach meter to bridge */
+#define DP_METER_ATTACH_BRIDGE		BIT(4)
+	/*!< meter ID */
+	int meter_id;
+	/*!< meter type single/dual rate */
+	enum dp_meter_type type;
+	/*!< Committed information rate in kbit/s */
+	u32 cir;
+	/*!< Peak information rate in kbit/s */
+	u32 pir;
+	/*!< committed burst size in kbit */
+	u32 cbs;
+	/*!< peak burst size in kbit */
+	u32 pbs;
+	/*!< color blind/aware */
+	bool col_mode;
+	/*!< DP_DIR_INGRESS(0) and DP_DIR_EGRESS(1) */
+	int dir;
+	 /*!< color marking mode */
+	enum dp_col_marking mode;
+	 /*!< traffic flow type for bridge/PCE rule mode only */
+	union {
+		enum dp_meter_traffic_type flow;
+		/*!< PCE table rule index */
+		u32 pce_idx;
+	};
+};
+
+/*!< API dp_meter_alloc: allocate a meter resource
+ *
+ * @param: [out] meter ID
+ * @param: [in]  flag:
+ *	   DP_F_DEREGISTER - free an already allocated meter
+ *
+ */
+int dp_meter_alloc(int *meterid, int flag);
+
+/*!< API dp_meter_add: setup meter/color marking and apply it to CTP/BP/Bridge
+ * accordingly
+ * This API is used to configure meters and color marking on flows, bridges,
+ * CTP and bridge port at ingress/egress direction. The meter configuration
+ * requires four traffic parameters CIR/PIR/CBS/PBS. For single rate metering
+ * only CIR and CBS are required.
+ *
+ * @param: [in] dev pointer to netdevice CTP/BP/Bridge. In case of PCE rule
+ *		meter this netdevice is used to get the correct device and
+ *		PCE table instance.
+ * @param: [in] meter meter parameters: rates, color marking
+ * @param: [in] flag:
+ *	   DP_METER_COL_MARKING_ONLY	- setup only color marking
+ *	   DP_METER_ATTACH_PCE		- setup PCE rule meter e.g., CPU traffic
+ *	   DP_METER_ATTACH_CTP		- setup CTP port metering
+ *	   DP_METER_ATTACH_BPORT	- setup bridge port metering
+ *	   DP_METER_ATTACH_BRIDGE	- setup bridge metering
+ *
+ */
+
+int dp_meter_add(struct net_device *dev, struct dp_meter_cfg *meter, int flag);
+
+/*!< API dp_meter_del: delete meter
+ * This API deletes meter attached to CTP/BP/Bridge.
+ * The meter id in the struct dp_meter_cfg has to be a valid one.
+ *
+ * @param: [in] dev pointer to netdevice CTP/BP/Bridge
+ * @param: [in] meter meter parameters: rates, color marking
+ * @param: [in] flag:
+ *	   DP_METER_COL_MARKING_ONLY	- setup only color marking
+ *	   DP_METER_ATTACH_PCE		- setup PCE rule meter e.g., CPU traffic
+ *	   DP_METER_ATTACH_CTP		- setup CTP port metering
+ *	   DP_METER_ATTACH_BPORT	- setup bridge port metering
+ *	   DP_METER_ATTACH_BRIDGE	- setup bridge metering
+ *
+ */
+int dp_meter_del(struct net_device *dev, struct dp_meter_cfg *meter, int flag);
+
+/*!
+ * @struct dp_tc_cfg
+ *
+ * Structure defining the mapping of traffic class to CTP.
+ *
+ */
+struct dp_tc_cfg {
+	/*!< CTP port netdev */
+	struct net_device *dev;
+	/*!< Traffic class */
+	u8 tc;
+	/*!< Force CTP to traffic class */
+	bool force;
+};
+
+/*!< API dp_ingress_ctp_tc_map_set: force to one traffic class if received
+ *  packet from one specified setup CTP.
+ *  This used e.g., when CTP port ingress traffic has to be assigned to a
+ *  downstream queue.
+ *
+ * @param [in] mapping of CTP to traffic class
+ * @param [in] flag: reserved
+ *
+ */
+int dp_ingress_ctp_tc_map_set(struct dp_tc_cfg *tc, int flag);
+
+
 #ifdef ENABLE_QOS_EXAMPLE
 /*! \ingroup APIs_dp_qos_example
  * @brief example1: use basic node_link API to create complex QOS structure
diff --git a/include/net/tc_act/tc_colmark.h b/include/net/tc_act/tc_colmark.h
new file mode 100644
index 000000000000..7cee48ddd10b
--- /dev/null
+++ b/include/net/tc_act/tc_colmark.h
@@ -0,0 +1,42 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __NET_TC_COLMARK_H
+#define __NET_TC_COLMARK_H
+
+#include <net/act_api.h>
+#include <linux/tc_act/tc_colmark.h>
+
+struct tcf_colmark {
+	struct tc_action	common;
+	enum tc_col_precedence	precedence; /* packet drop precedence marker */
+	enum tc_maeter_type	type;  /* color marker type: srTCM, trTCM */
+	bool			blind;
+	u32			flags;
+};
+
+#define to_colmark(a) ((struct tcf_colmark *)a)
+
+static inline bool is_tcf_colmark(const struct tc_action *a)
+{
+#ifdef CONFIG_NET_CLS_ACT
+	if (a->ops && a->ops->type == TCA_ACT_COLMARK)
+		return true;
+#endif
+	return false;
+}
+
+static inline bool tcf_colmark_mode(const struct tc_action *a)
+{
+	return to_colmark(a)->blind;
+}
+
+static inline u8 tcf_colmark_precedence(const struct tc_action *a)
+{
+	return to_colmark(a)->precedence;
+}
+
+static inline u8 tcf_colmark_mtype(const struct tc_action *a)
+{
+	return to_colmark(a)->type;
+}
+
+#endif /* __NET_TC_COLMARK_H */
diff --git a/include/uapi/linux/tc_act/tc_colmark.h b/include/uapi/linux/tc_act/tc_colmark.h
new file mode 100644
index 000000000000..d0ad86ee9311
--- /dev/null
+++ b/include/uapi/linux/tc_act/tc_colmark.h
@@ -0,0 +1,45 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef __LINUX_TC_COLMARK_H
+#define __LINUX_TC_COLMARK_H
+
+#include <linux/pkt_cls.h>
+
+#define TCA_ACT_COLMARK		27
+
+#define COLMARK_F_MODE		0x1
+#define COLMARK_F_MARKER	0x2
+#define COLMARK_F_MTYPE		0x4
+
+enum tc_drop_precedence {
+	NO_MARKING,
+	INTERNAL = 1,
+	DEI = 2,
+	PCP_8P0D = 3,
+	PCP_7P1D = 4,
+	PCP_6P2D = 5,
+	PCP_5P3D = 6,
+	DSCP_AF = 7,
+};
+
+enum tc_meter_type {
+	srTCM,
+	trTCM,
+};
+
+struct tc_colmark {
+	tc_gen;
+};
+
+enum {
+	TCA_COLMARK_UNSPEC,
+	TCA_COLMARK_TM,
+	TCA_COLMARK_PARMS,
+	TCA_COLMARK_MODE,
+	TCA_COLMARK_DROP_PRECEDEMCE,
+	TCA_COLMARK_METER_TYPE,
+	TCA_COLMARK_PAD,
+	__TCA_COLMARK_MAX
+};
+#define TCA_COLMARK_MAX (__TCA_COLMARK_MAX - 1)
+
+#endif
