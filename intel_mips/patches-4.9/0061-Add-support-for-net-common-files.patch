From 1293ca790473e91d639c638ed5767a08c67b3786 Mon Sep 17 00:00:00 2001
From: Hua Ma <hua.ma@linux.intel.com>
Date: Thu, 21 Jun 2018 17:38:14 +0800
Subject: [PATCH] Add support for net common files

---
 drivers/net/veth.c           | 18 ++++++++++++++++++
 include/linux/skbuff.h       | 21 +++++++++++++++++++++
 include/linux/udp_redirect.h | 28 ++++++++++++++++++++++++++++
 include/net/pkt_cls.h        | 18 ++++++++++++++++++
 include/uapi/linux/pkt_cls.h |  1 +
 net/Kconfig                  | 43 +++++++++++++++++++++++++++++++++++++++++++
 net/Makefile                 |  1 +
 net/sched/Kconfig            |  6 ++++++
 net/sched/cls_flower.c       | 21 ++++++++++++---------
 net/sched/cls_u32.c          | 29 +++++++++++++++++++++++++++++
 net/sched/sch_ingress.c      |  3 ++-
 11 files changed, 179 insertions(+), 10 deletions(-)

Index: linux-4.9.184/drivers/net/veth.c
===================================================================
--- linux-4.9.184.orig/drivers/net/veth.c
+++ linux-4.9.184/drivers/net/veth.c
@@ -133,7 +133,19 @@ drop:
 	rcu_read_unlock();
 	return NETDEV_TX_OK;
 }
+#if IS_ENABLED(CONFIG_PPA)
+extern int32_t (*ppa_if_ops_veth_xmit_fn)
+	(struct net_device *dev);
 
+static int32_t ppa_if_dev_is_veth(struct net_device *netdev)
+{
+	int ret = 0;
+
+	ret = (veth_xmit == netdev->netdev_ops->ndo_start_xmit) ? 1 : 0;
+
+	return ret;
+}
+#endif
 /*
  * general routines
  */
@@ -535,11 +547,17 @@ static struct rtnl_link_ops veth_link_op
 
 static __init int veth_init(void)
 {
+#if IS_ENABLED(CONFIG_PPA)
+	ppa_if_ops_veth_xmit_fn = ppa_if_dev_is_veth;
+#endif
 	return rtnl_link_register(&veth_link_ops);
 }
 
 static __exit void veth_exit(void)
 {
+#if IS_ENABLED(CONFIG_PPA)
+	ppa_if_ops_veth_xmit_fn = NULL;
+#endif
 	rtnl_link_unregister(&veth_link_ops);
 }
 
Index: linux-4.9.184/include/linux/skbuff.h
===================================================================
--- linux-4.9.184.orig/include/linux/skbuff.h
+++ linux-4.9.184/include/linux/skbuff.h
@@ -39,6 +39,12 @@
 #include <linux/in6.h>
 #include <linux/if_packet.h>
 #include <net/flow.h>
+#ifdef CONFIG_NETWORK_EXTMARK
+#include <linux/extmark.h>
+#endif
+#ifdef CONFIG_LTQ_DATAPATH_SKB
+#include <net/datapath_api_skb.h>
+#endif
 
 /* The interface for checksum offload between the stack and networking drivers
  * is as follows...
@@ -646,6 +652,10 @@ struct sk_buff {
 		struct rb_node		rbnode; /* used in netem, ip4 defrag, and tcp stack */
 	};
 
+#ifdef CONFIG_LTQ_DATAPATH_SKB
+	struct ltq_dp_skb dp_skb_info;
+#endif
+
 	union {
 		struct sock		*sk;
 		int			ip_defrag_offset;
@@ -798,6 +808,10 @@ struct sk_buff {
 	__u16			network_header;
 	__u16			mac_header;
 
+#if defined(CONFIG_LTQ_CBM) || IS_ENABLED(CONFIG_DIRECTCONNECT_DP_API)
+	__u32 DW0, DW1, DW2, DW3;
+#endif
+
 	/* private: */
 	__u32			headers_end[0];
 	/* public: */
@@ -809,6 +823,9 @@ struct sk_buff {
 				*data;
 	unsigned int		truesize;
 	atomic_t		users;
+#ifdef CONFIG_NETWORK_EXTMARK
+	__u32		extmark;
+#endif
 };
 
 #ifdef __KERNEL__
@@ -3336,6 +3353,11 @@ static inline int skb_csum_unnecessary(c
 		 skb_checksum_start_offset(skb) >= 0));
 }
 
+#ifdef CONFIG_LTQ_CBM
+void ltq_copy_skb_header(struct sk_buff *n, const struct sk_buff *skb);
+#endif
+
+
 /**
  *	skb_checksum_complete - Calculate checksum of an entire packet
  *	@skb: packet to process
Index: linux-4.9.184/include/linux/udp_redirect.h
===================================================================
--- /dev/null
+++ linux-4.9.184/include/linux/udp_redirect.h
@@ -0,0 +1,28 @@
+#ifndef _UDP_REDIRECT_H
+#define _UDP_REDIRECT_H
+
+/* udp_redirect.h: Hook to receive packets directly from the network stack.
+ *
+ * Copyright (C) 2011-2016  Lantiq Deutschland GmbH (www.lantiq.com)
+ * Copyright (c) 2017 Intel Corporation
+ */
+
+/* ============================= */
+/* Includes                      */
+/* ============================= */
+#ifndef _LINUX_TYPES_H
+#include <linux/types.h>
+#endif
+#include <linux/skbuff.h>
+
+/* ============================= */
+/* Definitions                   */
+/* ============================= */
+#define UDP_REDIRECT_MAGIC (void *)0x55445052L
+
+/* ============================= */
+/* Global variable declaration   */
+/* ============================= */
+extern int (*udp_do_redirect_fn)(struct sock *sk, struct sk_buff *skb);
+
+#endif
Index: linux-4.9.184/include/net/pkt_cls.h
===================================================================
--- linux-4.9.184.orig/include/net/pkt_cls.h
+++ linux-4.9.184/include/net/pkt_cls.h
@@ -391,6 +391,22 @@ tcf_match_indev(struct sk_buff *skb, int
 }
 #endif /* CONFIG_NET_CLS_IND */
 
+struct tc_cls_common_offload {
+	u32 chain_index;
+	__be16 protocol;
+	u32 prio;
+	u32 classid;
+};
+
+static inline void
+tc_cls_common_offload_init(struct tc_cls_common_offload *cls_common,
+			   const struct tcf_proto *tp)
+{
+	cls_common->protocol = tp->protocol;
+	cls_common->prio = tp->prio;
+	cls_common->classid = tp->classid;
+}
+
 struct tc_cls_u32_knode {
 	struct tcf_exts *exts;
 	struct tc_u32_sel *sel;
@@ -467,8 +483,10 @@ enum tc_fl_command {
 };
 
 struct tc_cls_flower_offload {
+	struct tc_cls_common_offload common;
 	enum tc_fl_command command;
 	unsigned long cookie;
+	unsigned int classid;
 	struct flow_dissector *dissector;
 	struct fl_flow_key *mask;
 	struct fl_flow_key *key;
Index: linux-4.9.184/include/uapi/linux/pkt_cls.h
===================================================================
--- linux-4.9.184.orig/include/uapi/linux/pkt_cls.h
+++ linux-4.9.184/include/uapi/linux/pkt_cls.h
@@ -182,6 +182,7 @@ enum {
 	TCA_U32_MARK,
 	TCA_U32_FLAGS,
 	TCA_U32_PAD,
+	TCA_U32_EXTMARK,
 	__TCA_U32_MAX
 };
 
Index: linux-4.9.184/net/Kconfig
===================================================================
--- linux-4.9.184.orig/net/Kconfig
+++ linux-4.9.184/net/Kconfig
@@ -63,6 +63,7 @@ source "net/packet/Kconfig"
 source "net/unix/Kconfig"
 source "net/xfrm/Kconfig"
 source "net/iucv/Kconfig"
+source "net/mcast_helper/Kconfig"
 
 config INET
 	bool "TCP/IP networking"
@@ -88,6 +89,41 @@ config INET
 
 	  Short answer: say Y.
 
+config UDP_REDIRECT
+	bool "Kernel Packet Interface for UDP re-direction"
+	help
+	  You can say Y here if you want to use hooks from kernel for
+	  UDP re-direction (KPI2UDP redirection)
+
+config INTEL_IPQOS
+	bool "IPQOS support"
+	help
+	  Intel IPQOS support
+
+config INTEL_IPQOS_MARK_SKBPRIO
+	bool "Will derive skb prio from nfmark(0-31) bits 6-9"
+	depends on INTEL_IPQOS
+	help
+	  Select this to to derive skb priority from nfmark.
+
+	  If unsure, say N.
+
+config INTEL_IPQOS_ACCEL_DISABLE
+	bool "IPQOS Accelration Disable Support"
+	depends on INTEL_IPQOS
+	help
+	  Enable/Disable 'PPA session learning' using bit 13 in EXTMARK
+
+	  If unsure  say N
+
+config VLAN_8021Q_COPY_TO_EXTMARK
+	bool "Will copy 8021Q vlan-id and vlan-prio into extmark"
+	depends on VLAN_8021Q && NETWORK_EXTMARK
+	help
+	  Select this to copy 8021Q valn-id and vlan-prio into extmark.
+
+	  If unsure, say N.
+
 if INET
 source "net/ipv4/Kconfig"
 source "net/ipv6/Kconfig"
@@ -108,6 +144,13 @@ config NETWORK_SECMARK
 config NET_PTP_CLASSIFY
 	def_bool n
 
+config NETWORK_EXTMARK
+	bool "Extended Marking"
+	help
+	  This enables extended marking in sk_buff strucure. This is
+	  extension of nfmark.
+	  If you are unsure how to answer this question, answer N.
+
 config NETWORK_PHY_TIMESTAMPING
 	bool "Timestamping in PHY devices"
 	select NET_PTP_CLASSIFY
Index: linux-4.9.184/net/Makefile
===================================================================
--- linux-4.9.184.orig/net/Makefile
+++ linux-4.9.184/net/Makefile
@@ -18,6 +18,7 @@ obj-$(CONFIG_INET)		+= ipv4/
 obj-$(CONFIG_XFRM)		+= xfrm/
 obj-$(CONFIG_UNIX)		+= unix/
 obj-$(CONFIG_NET)		+= ipv6/
+obj-$(CONFIG_MCAST_HELPER) 	+= mcast_helper/
 obj-$(CONFIG_PACKET)		+= packet/
 obj-$(CONFIG_NET_KEY)		+= key/
 obj-$(CONFIG_BRIDGE)		+= bridge/
Index: linux-4.9.184/net/sched/Kconfig
===================================================================
--- linux-4.9.184.orig/net/sched/Kconfig
+++ linux-4.9.184/net/sched/Kconfig
@@ -424,6 +424,12 @@ config CLS_U32_MARK
 	---help---
 	  Say Y here to be able to use netfilter marks as u32 key.
 
+config CLS_U32_EXTMARK
+	bool "Netfilter extended marks support"
+	depends on NET_CLS_U32
+	---help---
+	  Say Y here to be able to use netfilter marks as u32 key.
+
 config NET_CLS_RSVP
 	tristate "IPv4 Resource Reservation Protocol (RSVP)"
 	select NET_CLS
Index: linux-4.9.184/net/sched/cls_flower.c
===================================================================
--- linux-4.9.184.orig/net/sched/cls_flower.c
+++ linux-4.9.184/net/sched/cls_flower.c
@@ -214,7 +214,7 @@ static void fl_hw_destroy_filter(struct
 
 	if (!tc_should_offload(dev, tp, 0))
 		return;
-
+	tc_cls_common_offload_init(&offload.common, tp);
 	offload.command = TC_CLSFLOWER_DESTROY;
 	offload.cookie = cookie;
 
@@ -229,22 +229,24 @@ static int fl_hw_replace_filter(struct t
 				struct fl_flow_key *mask,
 				struct fl_flow_key *key,
 				struct tcf_exts *actions,
-				unsigned long cookie, u32 flags)
+				struct cls_fl_filter *f)
 {
 	struct net_device *dev = tp->q->dev_queue->dev;
 	struct tc_cls_flower_offload offload = {0};
 	struct tc_to_netdev tc;
 	int err;
 
-	if (!tc_should_offload(dev, tp, flags))
-		return tc_skip_sw(flags) ? -EINVAL : 0;
+	if (!tc_should_offload(dev, tp, f->flags))
+		return tc_skip_sw(f->flags) ? -EINVAL : 0;
 
+	tc_cls_common_offload_init(&offload.common, tp);
 	offload.command = TC_CLSFLOWER_REPLACE;
-	offload.cookie = cookie;
+	offload.cookie = (unsigned long)f;
 	offload.dissector = dissector;
 	offload.mask = mask;
 	offload.key = key;
 	offload.exts = actions;
+	offload.classid = f->res.classid; /* classid = 8000:1 */
 
 	tc.type = TC_SETUP_CLSFLOWER;
 	tc.cls_flower = &offload;
@@ -252,7 +254,7 @@ static int fl_hw_replace_filter(struct t
 	err = dev->netdev_ops->ndo_setup_tc(dev, tp->q->handle, tp->protocol,
 					    &tc);
 
-	if (tc_skip_sw(flags))
+	if (tc_skip_sw(f->flags))
 		return err;
 
 	return 0;
@@ -267,6 +269,7 @@ static void fl_hw_update_stats(struct tc
 	if (!tc_should_offload(dev, tp, 0))
 		return;
 
+	tc_cls_common_offload_init(&offload.common, tp);
 	offload.command = TC_CLSFLOWER_STATS;
 	offload.cookie = (unsigned long)f;
 	offload.exts = &f->exts;
@@ -422,7 +425,8 @@ static int fl_set_key(struct net *net, s
 	if (tb[TCA_FLOWER_KEY_ETH_TYPE]) {
 		ethertype = nla_get_be16(tb[TCA_FLOWER_KEY_ETH_TYPE]);
 
-		if (ethertype == htons(ETH_P_8021Q)) {
+		if (eth_type_vlan(ethertype) ||
+			ethertype == htons(ETH_P_ANYVLAN)) {
 			fl_set_key_vlan(tb, &key->vlan, &mask->vlan);
 			fl_set_key_val(tb, &key->basic.n_proto,
 				       TCA_FLOWER_KEY_VLAN_ETH_TYPE,
@@ -730,8 +734,7 @@ static int fl_change(struct net *net, st
 				   &mask.key,
 				   &fnew->key,
 				   &fnew->exts,
-				   (unsigned long)fnew,
-				   fnew->flags);
+				   fnew);
 	if (err)
 		goto errout;
 
Index: linux-4.9.184/net/sched/cls_u32.c
===================================================================
--- linux-4.9.184.orig/net/sched/cls_u32.c
+++ linux-4.9.184/net/sched/cls_u32.c
@@ -65,6 +65,9 @@ struct tc_u_knode {
 	u32			mask;
 	u32 __percpu		*pcpu_success;
 #endif
+#ifdef CONFIG_CLS_U32_EXTMARK
+	struct tc_u32_mark      extmark;
+#endif
 	struct tcf_proto	*tp;
 	struct rcu_head		rcu;
 	/* The 'sel' field MUST be the last field in structure to allow for
@@ -148,6 +151,14 @@ next_knode:
 			__this_cpu_inc(*n->pcpu_success);
 		}
 #endif
+#ifdef CONFIG_CLS_U32_EXTMARK
+		if ((skb->extmark & n->extmark.mask) != n->extmark.val) {
+			n = n->next;
+			goto next_knode;
+		} else {
+			n->extmark.success++;
+		}
+#endif
 
 		for (i = n->sel.nkeys; i > 0; i--, key++) {
 			int toff = off + key->off + (off2 & key->offmask);
@@ -698,6 +709,9 @@ static const struct nla_policy u32_polic
 	[TCA_U32_SEL]		= { .len = sizeof(struct tc_u32_sel) },
 	[TCA_U32_INDEV]		= { .type = NLA_STRING, .len = IFNAMSIZ },
 	[TCA_U32_MARK]		= { .len = sizeof(struct tc_u32_mark) },
+#ifdef CONFIG_CLS_U32_EXTMARK
+	[TCA_U32_EXTMARK]	= { .len = sizeof(struct tc_u32_mark) },
+#endif
 	[TCA_U32_FLAGS]		= { .type = NLA_U32 },
 };
 
@@ -1011,6 +1025,15 @@ static int u32_change(struct net *net, s
 		n->mask = mark->mask;
 	}
 #endif
+#ifdef CONFIG_CLS_U32_EXTMARK
+	if (tb[TCA_U32_EXTMARK]) {
+		struct tc_u32_mark *extmark;
+
+		extmark = nla_data(tb[TCA_U32_EXTMARK]);
+		memcpy(&n->extmark, extmark, sizeof(struct tc_u32_mark));
+		n->extmark.success = 0;
+	}
+#endif
 
 	err = u32_set_parms(net, tp, base, ht, n, tb, tca[TCA_RATE], ovr);
 	if (err == 0) {
@@ -1155,6 +1178,12 @@ static int u32_dump(struct net *net, str
 				goto nla_put_failure;
 		}
 #endif
+#ifdef CONFIG_CLS_U32_EXTMARK
+		if ((n->extmark.val || n->extmark.mask) &&
+			nla_put(skb, TCA_U32_EXTMARK,
+				sizeof(n->extmark), &n->extmark))
+			goto nla_put_failure;
+#endif
 
 		if (tcf_exts_dump(skb, &n->exts) < 0)
 			goto nla_put_failure;
Index: linux-4.9.184/net/sched/sch_ingress.c
===================================================================
--- linux-4.9.184.orig/net/sched/sch_ingress.c
+++ linux-4.9.184/net/sched/sch_ingress.c
@@ -118,7 +118,8 @@ static unsigned long clsact_get(struct Q
 
 static bool clsact_cl_offload(u32 classid)
 {
-	return TC_H_MIN(classid) == TC_H_MIN(TC_H_MIN_INGRESS);
+	return TC_H_MIN(classid) == TC_H_MIN(TC_H_MIN_INGRESS) ||
+	       TC_H_MIN(classid) == TC_H_MIN(TC_H_MIN_EGRESS);
 }
 
 static unsigned long clsact_bind_filter(struct Qdisc *sch,
