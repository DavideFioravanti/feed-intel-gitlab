From 7f95e6e0d52c62b10508f82a8ca2d6554147bced Mon Sep 17 00:00:00 2001
From: CI Assistant <yossi.ilkanaev@intel.com>
Date: Thu, 19 Jul 2018 07:40:09 +0200
Subject: [PATCH] Merge pull request #68 in SW_UGW/linux from
 feature/DRVLIB_SW-824-capability-protection-for-cap_sys_admin-privelege-control
 to master

* commit 'f3caac4b7fdf285ac09664db7af934c85ae8176d':
  Add CAP_SYS_ADMIN check on export and unexport. export/unexport by default only root can operate. The extra sanity check is based on Security SE's assumption: Root can alter the sysfs's permission so that other non-root user may be able to operate this sysfs. Extra check here to guarantee only root can do this change.
  Add CAP_SYS_ADMIN check for led Set proper permission for led debugfs files.
---
 drivers/gpio/gpiolib-sysfs.c  |  6 ++++++
 drivers/leds/leds-intel-sso.c | 25 +++++++++++++++----------
 2 files changed, 21 insertions(+), 10 deletions(-)

diff --git a/drivers/gpio/gpiolib-sysfs.c b/drivers/gpio/gpiolib-sysfs.c
index 4b44dd97c07f..43fa12a75c05 100644
--- a/drivers/gpio/gpiolib-sysfs.c
+++ b/drivers/gpio/gpiolib-sysfs.c
@@ -446,6 +446,9 @@ static ssize_t export_store(struct class *class,
 	struct gpio_desc	*desc;
 	int			status;
 
+	if (!capable(CAP_SYS_ADMIN))
+		return -EPERM;
+
 	status = kstrtol(buf, 0, &gpio);
 	if (status < 0)
 		goto done;
@@ -488,6 +491,9 @@ static ssize_t unexport_store(struct class *class,
 	struct gpio_desc	*desc;
 	int			status;
 
+	if (!capable(CAP_SYS_ADMIN))
+		return -EPERM;
+
 	status = kstrtol(buf, 0, &gpio);
 	if (status < 0)
 		goto done;
diff --git a/drivers/leds/leds-intel-sso.c b/drivers/leds/leds-intel-sso.c
index d61e5b8be634..69e90704d09a 100644
--- a/drivers/leds/leds-intel-sso.c
+++ b/drivers/leds/leds-intel-sso.c
@@ -4,19 +4,18 @@
  *
  * Copyright (C) 2018 Intel Corporation.
  */
+#include <linux/clk.h>
+#include <linux/debugfs.h>
+#include <linux/gpio/consumer.h>
+#include <linux/init.h>
 #include <linux/kernel.h>
+#include <linux/leds.h>
+#include <linux/mfd/syscon.h>
 #include <linux/module.h>
-#include <linux/init.h>
 #include <linux/of.h>
 #include <linux/property.h>
 #include <linux/platform_device.h>
-#include <linux/mfd/syscon.h>
 #include <linux/regmap.h>
-#include <linux/leds.h>
-#include <linux/clk.h>
-#include <linux/gpio/consumer.h>
-#include <linux/debugfs.h>
-#include <linux/proc_fs.h>
 #include <linux/uaccess.h>
 
 /* reg definition */
@@ -670,6 +669,9 @@ sso_led_create_write(struct file *s, const char __user *buffer,
 	struct device *dev;
 	int i;
 
+	if (!capable(CAP_SYS_ADMIN))
+		return -EPERM;
+
 	priv = file_inode(s)->i_private;
 	dev = priv->dev;
 	copy_from_user(buf, buffer, sizeof(buf) - 1);
@@ -751,6 +753,9 @@ sso_led_delete_write(struct file *s, const char __user *buffer,
 	struct sso_led *led;
 	int i;
 
+	if (!capable(CAP_SYS_ADMIN))
+		return -EPERM;
+
 	priv = file_inode(s)->i_private;
 	copy_from_user(buf, buffer, sizeof(buf) - 1);
 
@@ -866,17 +871,17 @@ static int sso_led_proc_init(struct sso_led_priv *priv)
 	if (!priv->debugfs)
 		return -ENOMEM;
 
-	file = debugfs_create_file("create", 0644, priv->debugfs,
+	file = debugfs_create_file("create", 0200, priv->debugfs,
 				   priv, &sso_led_create_fops);
 	if (!file)
 		goto __proc_err;
 
-	file = debugfs_create_file("delete", 0644, priv->debugfs,
+	file = debugfs_create_file("delete", 0200, priv->debugfs,
 				   priv, &sso_led_delete_fops);
 	if (!file)
 		goto __proc_err;
 
-	file = debugfs_create_file("show", 0644, priv->debugfs,
+	file = debugfs_create_file("show", 0400, priv->debugfs,
 				   priv, &sso_led_show_fops);
 	if (!file)
 		goto __proc_err;
