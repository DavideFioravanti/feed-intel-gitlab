From d529c16cb6367d86f9343e92c5897df5b193ed65 Mon Sep 17 00:00:00 2001
From: CI Assistant <yossi.ilkanaev@intel.com>
Date: Fri, 7 Dec 2018 15:58:55 +0100
Subject: [PATCH] Merge pull request #321 in SW_UGW/linux from
 bugfix/UGW_SW-32494-ipsec_tunnel_mode-in-8x-bugfix to master

* commit '225c6fa7dfe2e71a534124a6a7e3a1ec8648f9f2':
  UGW_SW-32494: double tab indentation fix
  UGW_SW-32494: Indentation fix
  UGW_SW-32494: IPSec in 8x bugfix post LGM changes
---
 drivers/net/ethernet/lantiq/ppa/ppa_hook.c | 53 ++++++++++++++++--------------
 1 file changed, 29 insertions(+), 24 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppa/ppa_hook.c b/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
index d83a357bcf82..f26af816e1c3 100644
--- a/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
+++ b/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
@@ -695,40 +695,45 @@ static unsigned int ppa_postrt_hook_fn(void *priv,
 		struct sk_buff *skb,
 		const struct nf_hook_state *state)
 {
-		struct nf_conn *ct = NULL;
-		enum ip_conntrack_info ctinfo;
-		uint32_t flags;
-
+	struct nf_conn *ct = NULL;
+	enum ip_conntrack_info ctinfo;
+	uint32_t flags;
+	/* Post routing hook gets invoked twice for IPSec Path in new PPA
+	hook mechanism (similar to netfilter). So in the first call
+	we skip the learning, since it will be a normal TCP/UDP session
+	packet which will eventually take the IPSec Path */
 #if IS_ENABLED(CONFIG_PPA_MPE_IP97)
 	struct iphdr *hdr = ip_hdr(skb);
-	/* exclude the encrypted ipsec tunnel packets */
-	if (hdr->protocol != IPPROTO_ESP) {
-#endif /* CONFIG_PPA_MPE_IP97*/
-		if (!ppa_hook_session_add_fn)
-			return NF_ACCEPT;
+	if (hdr->protocol == IPPROTO_ESP || skb_dst(skb)->flags & DST_XFRM_TUNNEL || !ppa_hook_session_add_fn)
+		return NF_ACCEPT;
+	/* In the Second call (After Encryption) we skip again for
+	ESP type since we call this hook in xfrm_output_resume before
+	old conntrack reset, based on which the p_item was created */
+#else
+	if (skb_dst(skb)->flags & DST_XFRM_TUNNEL || !ppa_hook_session_add_fn)
+		return NF_ACCEPT;
+#endif
 
 #if IS_ENABLED(CONFIG_INTEL_IPQOS_ACCEL_DISABLE)
-		/* check for 13th bit in NFMARK set by IPQOS classifier */
-		/* If this bit is set, dont call PPA session add fn*/
-		bool accel_st = 0;
+	/* check for 13th bit in NFMARK set by IPQOS classifier */
+	/* If this bit is set, dont call PPA session add fn*/
+	bool accel_st = 0;
 #if IS_ENABLED(CONFIG_NETWORK_EXTMARK)
-		GET_DATA_FROM_MARK_OPT(skb->extmark, ACCELSEL_MASK,
-						 ACCELSEL_START_BIT_POS, accel_st);
+	GET_DATA_FROM_MARK_OPT(skb->extmark, ACCELSEL_MASK,
+					 ACCELSEL_START_BIT_POS, accel_st);
 #endif /* CONFIG_NETWORK_EXTMARK*/
-		if (accel_st != 0)
-			return NF_ACCEPT;
+	if (accel_st != 0)
+		return NF_ACCEPT;
 #endif /* CONFIG_INTEL_IPQOS_ACCEL_DISABLE*/
 
-		ct = nf_ct_get(skb, &ctinfo);
+	ct = nf_ct_get(skb, &ctinfo);
 
-		flags = 0; /* post routing */
-		flags |= CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL ?
-			 PPA_F_SESSION_ORG_DIR : PPA_F_SESSION_REPLY_DIR;
+	flags = 0; /* post routing */
+	flags |= CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL ?
+		 PPA_F_SESSION_ORG_DIR : PPA_F_SESSION_REPLY_DIR;
+
+	ppa_hook_session_add_fn(skb, ct, flags);
 
-		ppa_hook_session_add_fn(skb, ct, flags);
-#if IS_ENABLED(CONFIG_PPA_MPE_IP97)
-	}
-#endif /* CONFIG_PPA_MPE_IP97*/
 	return NF_ACCEPT;
 }
 
