From 88baf56db6c595d617a3dde646f03e2b71ba9160 Mon Sep 17 00:00:00 2001
From: "Xu, Liang" <liang.xu@intel.com>
Date: Thu, 5 Jul 2018 12:53:22 +0200
Subject: [PATCH] Merge pull request #54 in SW_UGW/linux from
 bugfix/DRVLIB_SW-778-1588-ptp-support-bugfix to master

* commit 'cfa3cf13fd66a5f3130ef195960587c0ed758649':
  Corrected the review comments
  Removing executable file permission
  DRVLIB_SW-778: Build break issue for Grx500 is solved
---
 drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c | 18 +++++++++++++++---
 1 file changed, 15 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c b/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c
index a0999e524095..41fb48284397 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c
@@ -324,11 +324,16 @@ static void *parse_ptp_packet(struct sk_buff *skb,
 static void tx_hwtstamp(struct mac_prv_data *pdata,
 			struct skb_shared_hwtstamps *shhwtstamp)
 {
+	if (!pdata->ptp_tx_skb)
+		return;
+
 	/* Marking Tx Timestamp complete */
 	if (!shhwtstamp->hwtstamp.tv64)
 		shhwtstamp->hwtstamp = ktime_get_real();
 
-	skb_tstamp_tx(pdata->ptp_tx_skb, shhwtstamp);
+	skb_complete_tx_timestamp(pdata->ptp_tx_skb, shhwtstamp);
+
+	skb_put(pdata->ptp_tx_skb, pdata->ptp_tx_skb->len);
 }
 
 /* =========================== TX TIMESTAMP =========================== */
@@ -352,12 +357,12 @@ int xgmac_tx_hwts(void *pdev, struct sk_buff *skb)
 		/* declare that device is doing timestamping */
 		skb_shinfo(skb)->tx_flags |= SKBTX_IN_PROGRESS;
 
-		pdata->ptp_tx_skb = skb_get(skb);
-
 		/* Currently supporting only Master Mode */
 		if (IS_2STEP(pdata)) {
 			mac_dbg("2-Step\n");
 
+			pdata->ptp_tx_skb = skb_get(skb);
+
 			/* PTP Sync if we are Master TTSE=1 OSTC=0, OSTPA=0 */
 			rec_id = fifo_entry_add(pdev, 1, 0, 0, 0, 0, 0);
 		}
@@ -612,6 +617,7 @@ static void xgmac_extts_isr_handler(struct mac_prv_data *pdata,
 				    u32 tstamp_sts)
 {
 	u8 val = MAC_GET_VAL(tstamp_sts, MAC_TSTAMP_STSR, ATSSTN);
+#ifdef CONFIG_PTP_1588_CLOCK
 	struct ptp_clock_event event;
 
 	if (val & AUX_TRIG_0) {
@@ -631,6 +637,8 @@ static void xgmac_extts_isr_handler(struct mac_prv_data *pdata,
 			ptp_clock_event(pdata->ptp_clock, &event);
 		}
 	}
+
+#endif
 }
 
 /* This API performs the required steps for enabling PTP support.
@@ -688,11 +696,15 @@ int xgmac_get_ts_info(void *pdev,
 				   SOF_TIMESTAMPING_RX_HARDWARE |
 				   SOF_TIMESTAMPING_RAW_HARDWARE;
 
+#ifdef CONFIG_PTP_1588_CLOCK
+
 	if (pdata->ptp_clock)
 		ts_info->phc_index = ptp_clock_index(pdata->ptp_clock);
 	else
 		ts_info->phc_index = -1;
 
+#endif
+
 	ts_info->tx_types = (1 << HWTSTAMP_TX_OFF) | (1 << HWTSTAMP_TX_ON);
 	ts_info->rx_filters = (1 << HWTSTAMP_FILTER_NONE) |
 			      (1 << HWTSTAMP_FILTER_PTP_V1_L4_EVENT) |
