From 12cd44d0a63e61b67a6b19ca7d868771b19d5588 Mon Sep 17 00:00:00 2001
From: CI Assistant <yossi.ilkanaev@intel.com>
Date: Wed, 12 Sep 2018 15:08:36 +0200
Subject: [PATCH] Merge pull request #181 in SW_UGW/linux from
 feature/DRVLIB_SW-894-cleanup-p31g-phy-driver to master

* commit '9ccf6390c897475e61e54f4fd957c881b686db22':
  DRVLIB_SW-894 - Remove hardcoded GPHY firmware load address
  DRVLIB_SW-894 - Add DT bindings doc for gphy fw driver
  DRVLIB_SW-894 - Add syscon and DT reg to gphy-fw driver
  DRVLIB_SW-894 - Reorganize soc-dependent reset struct in gphy-fw driver
  DRVLIB_SW-894 - add soc data to gphy-fw driver
  DRVLIB_SW-894 - Add private data in gphy fw driver
---
 .../devicetree/bindings/net/lantiq,phy-xrx500.txt  |  41 +++
 drivers/net/ethernet/lantiq/xrx500_phy_fw.c        | 378 +++++++++++++--------
 2 files changed, 272 insertions(+), 147 deletions(-)

diff --git a/Documentation/devicetree/bindings/net/lantiq,phy-xrx500.txt b/Documentation/devicetree/bindings/net/lantiq,phy-xrx500.txt
new file mode 100644
index 000000000000..48aa28cd49d8
--- /dev/null
+++ b/Documentation/devicetree/bindings/net/lantiq,phy-xrx500.txt
@@ -0,0 +1,41 @@
+Intel/Lantiq GPHY firmware loader
+
+This file documents the dt bindings for the Intel/Lantiq GPHY firmware
+loader, currently used in xrx500 and prx300 platform.
+
+Required properties:
+- compatible	: "lantiq,phy-xrx500" for xrx500 platform
+		  "intel,phy-prx300" for prx300 platform
+- firmware	: firmware file name
+- reg		: register address
+- resets	: list of phandle and reset specifier pairs.
+- reset-names	: list of reset signal names.
+  Reset and reset names are platform specific
+
+For prx300 platform:
+- intel,syscon	: phandle to syscon chiptop
+- intel,cgu-syscon	: phandle to syscon cgu
+
+Example:
+
+phy_fw: phy-xrx500@3c00 {
+	compatible = "lantiq,phy-xrx500";
+	reg = <0x3c00 0x400>;
+	firmware = "ltq_fw_PHY11G_IP_xRx5xx_A21.bin";
+	resets = <&rcu0 0x10 29>, <&rcu0 0x10 28>,
+		 <&rcu0 0x10 26>, <&rcu0 0x10 25>,
+		 <&rcu0 0x10 31>;
+	reset-names = "phy0", "phy1", "phy2", "phy3", "phy4";
+};
+
+phy_fw: phy-prx300@210100 {
+	compatible = "intel,phy-prx300";
+	reg = <0x210100 0x10>;
+	firmware = "ltq_fw_PHY31G_IP_prx3xx_A11.bin";
+	resets = <&rcu0 0x10 29>, <&rcu0 0x48 28>,
+		 <&rcu0 0x48 27>;
+	reset-names = "gphy", "gphy_cdb", "gphy_pwr_down";
+	intel,syscon = <&sysconf>; /* chiptop */
+	intel,cgu-syscon = <&cgu0>;
+};
+
diff --git a/drivers/net/ethernet/lantiq/xrx500_phy_fw.c b/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
index 65927c362f00..6ef08b0a2047 100644
--- a/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
+++ b/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
@@ -12,10 +12,43 @@
 #include <linux/firmware.h>
 #include <linux/of_platform.h>
 #include <linux/reset.h>
+#include <linux/regmap.h>
+#include <linux/mfd/syscon.h>
 
-#include <lantiq_soc.h>
+#define XRX500_GPHY_NUM 5 /* phy2-5 + phyf */
+struct xrx500_reset_control {
+	struct reset_control *phy[XRX500_GPHY_NUM];
+};
+
+struct prx300_reset_control {
+	struct reset_control *gphy;
+	struct reset_control *gphy_cdb;
+	struct reset_control *gphy_pwr_down;
+};
+
+struct xway_gphy_data {
+	struct device *dev;
+	struct regmap *syscfg, *cgu_syscfg;
+	void __iomem *base;
+
+	dma_addr_t dma_addr;
+
+	/* Number of resets and names are SoC specific. Hence we place it as
+	 * union here.
+	 */
+	union {
+		struct xrx500_reset_control xrx500;
+		struct prx300_reset_control prx300;
+	} rst;
+
+	/* SoC specific functions */
+	const struct xway_gphy_soc_data {
+		int (*boot_func)(struct xway_gphy_data *);
+		int (*dt_parse_func)(struct xway_gphy_data *);
+		int align;
+	} *soc_data;
+};
 
-#define XRX200_GPHY_FW_ALIGN	(16 * 1024)
 /* GPHY related */
 static int g_xway_gphy_fw_loaded;
 
@@ -40,18 +73,14 @@ static u32 xrx500_gphy[] = {
 	GPHYF_LBADR_XRX500,
 };
 
-#define GSW_L_TOP_BASE 0xBC003C00
-
-/* prx300 gphy register definition */
-#define PRX300_GPHY_CGU_BASE 0xb6200000
+/* prx300 register definition */
+/* CGU0 */
 #define PRX300_GPHY_FCR 0x800
 #define PRX300_GPHY0_GPS0 0x804
 #define PRX300_GPHY0_GPS1 0x808
 #define PRX300_GPHY0_GPS0_LO 0x3f004000
 #define PRX300_GPHY0_GPS0_HI 0
-#define PRX300_FW_LOAD_ADDR 0x18da0000
-
-#define PRX300_GPHY_CDB_PDI_BASE 0xb6210100
+/* GPHY CDB */
 #define PRX300_GPHY_CDB_PDI_PLL_CFG0 0x0
 #define PRX300_GPHY_CDB_PDI_PLL_CFG2 0x8
 #define PRX300_GPHY_CDB_PDI_PLL_MISC 0xc
@@ -59,209 +88,246 @@ static u32 xrx500_gphy[] = {
 #define PRX300_PLL_REFDIV 0x4
 #define PRX300_GPHY_FORCE_LATCH 1
 #define PRX300_GPHY_CLEAR_STICKY 1
-
-#define PRX300_CHIP_TOP 0xb6180000
+/* Chiptop */
 #define PRX300_IFMUX_CFG 0x120
+#define PRX300_LAN_MUX_MASK 0x2
+#define PRX300_LAN_MUX_GPHY 0x0
 
-static void gsw_reg_w32(u32 base, u32 val, u32 reg_off)
+static u32 gsw_reg_r32(void __iomem *base, u32 reg_off)
 {
-	ltq_w32(val, (void __iomem *)(base + reg_off));
+	return __raw_readl(base + reg_off);
 }
 
-static void gsw_reg_w32_mask(u32 base, u32 clear, u32 val, u32 reg_off)
+static void gsw_reg_w32(void __iomem *base, u32 val, u32 reg_off)
 {
-	ltq_w32_mask(clear, val, (void __iomem *)(base + reg_off));
+	__raw_writel(val, base + reg_off);
+}
+
+static void gsw_reg_w32_mask(void __iomem *base, u32 clear, u32 val,
+			     u32 reg_off)
+{
+	gsw_reg_w32(base, val | (gsw_reg_r32(base, reg_off) & (~clear)),
+		    reg_off);
 }
 
 /* xrx500 specific boot sequence */
-static int xrx500_gphy_boot(struct device *dev, struct reset_control **phy_rst,
-			    unsigned int id, dma_addr_t dev_addr)
+static int xrx500_gphy_boot(struct xway_gphy_data *priv)
 {
-	if (id > 4) {
-		dev_info(dev, "%u is an invalid gphy id\n", id);
-		return -EINVAL;
+	int i;
+	struct xrx500_reset_control *rst = &priv->rst.xrx500;
+
+	for (i = 0; i < XRX500_GPHY_NUM; i++) {
+		if (!rst->phy[i])
+			continue;
+
+		reset_control_assert(rst->phy[i]);
+		gsw_reg_w32(priv->base, (priv->dma_addr & 0xFFFF),
+			    xrx500_gphy[i]);
+		gsw_reg_w32(priv->base, ((priv->dma_addr >> 16) & 0xFFFF),
+			    (xrx500_gphy[i] + 4));
+		reset_control_deassert(rst->phy[i]);
+		dev_info(priv->dev, "booting GPHY%u firmware for GRX500\n", i);
+	}
+
+	return 0;
+}
+
+static int xrx500_dt_parse(struct xway_gphy_data *priv)
+{
+	char phy_str[8];
+	int i;
+	struct xrx500_reset_control *rst = &priv->rst.xrx500;
+
+	for (i = 0; i < XRX500_GPHY_NUM; i++) {
+		snprintf(phy_str, sizeof(phy_str), "phy%d", i);
+
+		rst->phy[i] = devm_reset_control_get_optional(priv->dev,
+							      phy_str);
+		if (IS_ERR(rst->phy[i])) {
+			dev_err(priv->dev, "fail to get %s prop\n", phy_str);
+			return PTR_ERR(rst->phy[i]);
+		}
 	}
-	reset_control_assert(phy_rst[0]);
-	gsw_reg_w32(GSW_L_TOP_BASE, (dev_addr & 0xFFFF),
-		    xrx500_gphy[id]);
-	gsw_reg_w32(GSW_L_TOP_BASE, ((dev_addr >> 16) & 0xFFFF),
-		    (xrx500_gphy[id] + 4));
-	reset_control_deassert(phy_rst[0]);
-	dev_info(dev, "booting GPHY%u firmware at %X for GRX500\n",
-		 id, dev_addr);
 
 	return 0;
 }
 
 /* prx300 specific boot sequence */
-static int prx300_gphy_boot(struct device *dev, struct reset_control **phy_rst,
-			    unsigned int id, dma_addr_t dev_addr, void *addr)
+static int prx300_gphy_boot(struct xway_gphy_data *priv)
 {
+	struct prx300_reset_control *rst = &priv->rst.prx300;
+
 	/* set LAN interface to GPHY */
-	gsw_reg_w32_mask(PRX300_CHIP_TOP, 0x2, 0x0, PRX300_IFMUX_CFG);
+	regmap_update_bits(priv->syscfg, PRX300_IFMUX_CFG, PRX300_LAN_MUX_MASK,
+			   PRX300_LAN_MUX_GPHY);
 
 	/* GPHY reset */
-	reset_control_assert(phy_rst[0]);
-	udelay(500);
+	reset_control_assert(rst->gphy);
+	usleep_range(500, 1000);
 
 	/* CDB and Power Down */
-	reset_control_assert(phy_rst[1]);
-	reset_control_assert(phy_rst[2]);
-	udelay(400);
+	reset_control_assert(rst->gphy_cdb);
+	reset_control_assert(rst->gphy_pwr_down);
+	usleep_range(400, 1000);
 
 	/* release CDB reset */
-	reset_control_deassert(phy_rst[1]);
+	reset_control_deassert(rst->gphy_cdb);
 
 	/* GPHY FW address and pin strapping */
-	gsw_reg_w32(PRX300_GPHY_CGU_BASE, dev_addr, PRX300_GPHY_FCR);
-	gsw_reg_w32(PRX300_GPHY_CGU_BASE, PRX300_GPHY0_GPS0_LO,
-		    PRX300_GPHY0_GPS0);
-	gsw_reg_w32(PRX300_GPHY_CGU_BASE, PRX300_GPHY0_GPS0_HI,
-		    PRX300_GPHY0_GPS1);
+	regmap_update_bits(priv->cgu_syscfg, PRX300_GPHY_FCR, ~0,
+			   priv->dma_addr);
+	regmap_update_bits(priv->cgu_syscfg, PRX300_GPHY0_GPS0, ~0,
+			   PRX300_GPHY0_GPS0_LO);
+	regmap_update_bits(priv->cgu_syscfg, PRX300_GPHY0_GPS1, ~0,
+			   PRX300_GPHY0_GPS0_HI);
 
 	/* release GPHY reset */
-	reset_control_deassert(phy_rst[0]);
-	udelay(500);
+	reset_control_deassert(rst->gphy);
+	usleep_range(500, 1000);
 
 	/* GPHY Power on */
-	reset_control_deassert(phy_rst[2]);
+	reset_control_deassert(rst->gphy_pwr_down);
 
 	/* Set divider and misc config */
-	gsw_reg_w32_mask(PRX300_GPHY_CDB_PDI_BASE, 0xFFF0,
-			 (PRX300_PLL_FBDIV << 4), PRX300_GPHY_CDB_PDI_PLL_CFG0);
-	gsw_reg_w32(PRX300_GPHY_CDB_PDI_BASE, (PRX300_PLL_REFDIV << 8),
+	gsw_reg_w32_mask(priv->base, 0xFFF0, (PRX300_PLL_FBDIV << 4),
+			 PRX300_GPHY_CDB_PDI_PLL_CFG0);
+	gsw_reg_w32(priv->base, (PRX300_PLL_REFDIV << 8),
 		    PRX300_GPHY_CDB_PDI_PLL_CFG2);
-	gsw_reg_w32_mask(PRX300_GPHY_CDB_PDI_BASE,
-			 (PRX300_GPHY_FORCE_LATCH << 13) |
-			  (PRX300_GPHY_CLEAR_STICKY << 14),
+	gsw_reg_w32_mask(priv->base, (PRX300_GPHY_FORCE_LATCH << 13) |
+			 (PRX300_GPHY_CLEAR_STICKY << 14),
 			 (PRX300_GPHY_FORCE_LATCH << 13) |
-			  (PRX300_GPHY_CLEAR_STICKY << 14),
+			 (PRX300_GPHY_CLEAR_STICKY << 14),
 			 PRX300_GPHY_CDB_PDI_PLL_MISC);
 
 	/* delay to wait until firmware boots up */
 	msleep(100);
 
-	dev_info(dev, "booting GPHY%u firmware at %X for PRX300\n",
-		 id, dev_addr);
+	dev_info(priv->dev, "booting GPHY firmware for PRX300\n");
+	return 0;
+}
+
+static int prx300_dt_parse(struct xway_gphy_data *priv)
+{
+	struct prx300_reset_control *rst = &priv->rst.prx300;
+
+	/* get chiptop regmap */
+	priv->syscfg = syscon_regmap_lookup_by_phandle(priv->dev->of_node,
+						       "intel,syscon");
+	if (IS_ERR(priv->syscfg)) {
+		dev_err(priv->dev, "No phandle for intel,syscon\n");
+		return PTR_ERR(priv->syscfg);
+	}
+
+	/* get CGU regmap */
+	priv->cgu_syscfg = syscon_regmap_lookup_by_phandle(priv->dev->of_node,
+							   "intel,cgu-syscon");
+	if (IS_ERR(priv->cgu_syscfg)) {
+		dev_err(priv->dev, "No phandle for intel,cgu-syscon\n");
+		return PTR_ERR(priv->cgu_syscfg);
+	}
+
+	rst->gphy = devm_reset_control_get(priv->dev, "gphy");
+	if (IS_ERR(rst->gphy)) {
+		dev_err(priv->dev, "fail to get gphy prop\n");
+		return PTR_ERR(rst->gphy);
+	}
+
+	rst->gphy_cdb = devm_reset_control_get(priv->dev, "gphy_cdb");
+	if (IS_ERR(rst->gphy_cdb)) {
+		dev_err(priv->dev, "fail to get gphy_cdb prop\n");
+		return PTR_ERR(rst->gphy_cdb);
+	}
+
+	rst->gphy_pwr_down = devm_reset_control_get(priv->dev, "gphy_pwr_down");
+	if (IS_ERR(rst->gphy_pwr_down)) {
+		dev_err(priv->dev, "fail to get gphy_pwr_down prop\n");
+		return PTR_ERR(rst->gphy_pwr_down);
+	}
 
-	devm_iounmap(dev, addr);
 	return 0;
 }
 
-static dma_addr_t xway_gphy_load(struct platform_device *pdev, void **addr)
+static int xway_gphy_load(struct xway_gphy_data *priv)
 {
 	const struct firmware *fw;
-	dma_addr_t dev_addr = 0;
 	const char *fw_name;
-	void *fw_addr;
+	void *virt_addr;
 	size_t size;
 
-	if (of_property_read_string(pdev->dev.of_node, "firmware", &fw_name)) {
-		dev_err(&pdev->dev, "failed to load firmware filename\n");
-		return 0;
+	if (of_property_read_string(priv->dev->of_node, "firmware", &fw_name)) {
+		dev_err(priv->dev, "failed to load firmware filename\n");
+		return -EINVAL;
 	}
 
-	dev_info(&pdev->dev, "requesting %s\n", fw_name);
-	if (request_firmware(&fw, fw_name, &pdev->dev)) {
-		dev_err(&pdev->dev, "failed to load firmware: %s\n", fw_name);
-		return 0;
+	dev_info(priv->dev, "requesting %s\n", fw_name);
+	if (request_firmware(&fw, fw_name, priv->dev)) {
+		dev_err(priv->dev, "failed to load firmware: %s\n", fw_name);
+		return -EIO;
 	}
 
 	/**
 	 * GPHY cores need the firmware code in a persistent and contiguous
-	 * memory area with a 16 kB boundary aligned start address
+	 * memory area with a boundary aligned start address.
 	 */
-	size = fw->size + XRX200_GPHY_FW_ALIGN;
-
-	if (of_device_is_compatible(pdev->dev.of_node, "intel,phy-prx300")) {
-		/* Temporary workaround for PRX300 GPHY issue.
-		 * Firmware loading in PRX300 GPHY does not work if address
-		 * is in DDR. For this reason we hardcode the address to SRAM
-		 * location (which is assumed to be free at the beginning of
-		 * boot).
-		 */
-		dev_addr = (dma_addr_t)PRX300_FW_LOAD_ADDR;
-		fw_addr = devm_ioremap_nocache(&pdev->dev, PRX300_FW_LOAD_ADDR,
-					       size);
-		dev_info(&pdev->dev, "Temporary use SRAM for firmware %p:%x\n",
-			 fw_addr, dev_addr);
-	} else {
-		fw_addr = dma_alloc_coherent(&pdev->dev, size, &dev_addr,
-					     GFP_KERNEL);
+	size = fw->size + priv->soc_data->align;
+	virt_addr = dmam_alloc_coherent(priv->dev, size, &priv->dma_addr,
+					GFP_KERNEL);
+	if (!virt_addr) {
+		dev_err(priv->dev, "failed to alloc firmware memory\n");
+		release_firmware(fw);
+		return -ENOMEM;
 	}
 
-	if (fw_addr) {
-		fw_addr = PTR_ALIGN(fw_addr, XRX200_GPHY_FW_ALIGN);
-		dev_addr = ALIGN(dev_addr, XRX200_GPHY_FW_ALIGN);
-		memcpy(fw_addr, fw->data, fw->size);
-	} else {
-		dev_err(&pdev->dev, "failed to alloc firmware memory\n");
-	}
+	virt_addr = PTR_ALIGN(virt_addr, priv->soc_data->align);
+	priv->dma_addr = ALIGN(priv->dma_addr, priv->soc_data->align);
+	memcpy(virt_addr, fw->data, fw->size);
 
 	release_firmware(fw);
-	*addr = fw_addr;
-	return dev_addr;
+	return 0;
 }
 
 static int xway_phy_fw_probe(struct platform_device *pdev)
 {
-	dma_addr_t fw_addr;
-	struct property *pp;
-	unsigned char *phyids;
-	int i, ret = 0;
-	char phy_str[16];
-	struct reset_control *phy_rst[3];
-	void *addr;
-
-	fw_addr = xway_gphy_load(pdev, &addr);
-	if (!fw_addr)
-		return -EPROBE_DEFER;
+	int ret = 0;
+	struct xway_gphy_data *priv;
+	struct resource *res;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		dev_err(&pdev->dev, "no resources\n");
+		return -ENODEV;
+	}
 
-	pp = of_find_property(pdev->dev.of_node, "phy_id", NULL);
-	if (!pp)
-		return -ENOENT;
-
-	phyids = pp->value;
-	for (i = 0; i < pp->length && !ret; i++) {
-		sprintf(phy_str, "phy%d", phyids[i]);
-		phy_rst[0] = devm_reset_control_get(&pdev->dev, phy_str);
-		if (IS_ERR(phy_rst[0])) {
-			dev_err(&pdev->dev, "fail to get %s prop\n", phy_str);
-			return PTR_ERR(phy_rst[0]);
-		}
+	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv) {
+		dev_err(&pdev->dev, "can't allocate private data\n");
+		return -ENOMEM;
+	}
 
-		if (of_device_is_compatible(pdev->dev.of_node,
-					    "lantiq,phy-xrx500")) {
-			ret = xrx500_gphy_boot(&pdev->dev, phy_rst, phyids[i],
-					       fw_addr);
-		} else if (of_device_is_compatible(pdev->dev.of_node,
-						   "intel,phy-prx300")) {
-			/* phy cdb reset */
-			sprintf(phy_str, "phy_cdb%d", phyids[i]);
-			phy_rst[1] = devm_reset_control_get(&pdev->dev,
-							    phy_str);
-			if (IS_ERR(phy_rst[1])) {
-				dev_err(&pdev->dev, "fail to get %s prop\n",
-					phy_str);
-				return PTR_ERR(phy_rst[1]);
-			}
-
-			/* phy power down */
-			sprintf(phy_str, "phy_pwr_down%d", phyids[i]);
-			phy_rst[2] = devm_reset_control_get(&pdev->dev,
-							    phy_str);
-			if (IS_ERR(phy_rst[2])) {
-				dev_err(&pdev->dev, "fail to get %s prop\n",
-					phy_str);
-				return PTR_ERR(phy_rst[2]);
-			}
-
-			ret = prx300_gphy_boot(&pdev->dev, phy_rst, phyids[i],
-					       fw_addr, addr);
-		}
+	priv->base = devm_ioremap_resource(&pdev->dev, res);
+	if (!priv->base)
+		return -ENOMEM;
+
+	priv->soc_data = of_device_get_match_data(&pdev->dev);
+	if (!priv->soc_data) {
+		dev_err(&pdev->dev, "Failed to find soc data!\n");
+		return -ENODEV;
 	}
+
+	priv->dev = &pdev->dev;
+	platform_set_drvdata(pdev, priv);
+
+	ret = priv->soc_data->dt_parse_func(priv);
+	if (ret)
+		return -EINVAL;
+
+	ret = xway_gphy_load(priv);
+	if (ret)
+		return -EPROBE_DEFER;
+
+	ret = priv->soc_data->boot_func(priv);
 	if (!ret)
-		mdelay(100);
+		msleep(100);
 
 	g_xway_gphy_fw_loaded = 1;
 	return ret;
@@ -276,9 +342,27 @@ bool is_xway_gphy_fw_loaded(void)
 }
 EXPORT_SYMBOL(is_xway_gphy_fw_loaded);
 
+static struct xway_gphy_soc_data xrx500_gphy_data = {
+	.boot_func = &xrx500_gphy_boot,
+	.dt_parse_func = &xrx500_dt_parse,
+	.align = 16 * 1024,
+};
+
+static struct xway_gphy_soc_data prx300_gphy_data = {
+	.boot_func = &prx300_gphy_boot,
+	.dt_parse_func = &prx300_dt_parse,
+	.align = 128 * 1024,
+};
+
 static const struct of_device_id xway_phy_match[] = {
-	{ .compatible = "lantiq,phy-xrx500" },
-	{ .compatible = "intel,phy-prx300" },
+	{
+		.compatible = "lantiq,phy-xrx500",
+		.data = &xrx500_gphy_data,
+	},
+	{
+		.compatible = "intel,phy-prx300",
+		.data = &prx300_gphy_data,
+	},
 	{},
 };
 MODULE_DEVICE_TABLE(of, xway_phy_match);
