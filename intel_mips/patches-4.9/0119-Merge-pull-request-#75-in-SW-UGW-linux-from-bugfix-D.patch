From 7ceab6cf9589711487643fd9a8a40ef506284d26 Mon Sep 17 00:00:00 2001
From: CI Assistant <yossi.ilkanaev@intel.com>
Date: Wed, 18 Jul 2018 16:49:55 +0200
Subject: [PATCH] Merge pull request #75 in SW_UGW/linux from
 bugfix/DRVLIB_SW-835-skb-buffer-not-freed-in-cpu-tx-path to master

* commit '30aad5a81f91c0e1ba925050ad661d1c3093a098':
  Remove redundant code
  DRVLIB_SW-835:copy packet if the skb user count > 1
---
 drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c | 17 +++++------------
 1 file changed, 5 insertions(+), 12 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
index 720b9cb9e71f..0c60b28d0578 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
+++ b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
@@ -1670,21 +1670,20 @@ static s32 cqm_cpu_pkt_tx(struct sk_buff *skb, struct cbm_tx_data *data,
 	u32 tmp_data_ptr;
 	struct dma_tx_desc_2 *desc_2 = (struct dma_tx_desc_2 *)&skb->DW2;
 	u32 new_buf = 0;
-	s32 clone_f, no_hdr_room_f = 0;
+	s32 clone_f, shared_f, no_hdr_room_f = 0;
 	int pool, policy, tot_len, buf_size, cpu_buf;
-	int copied_to_cbm = 0;
-	void *metadata;
 
 	dev_dbg(cqm_ctrl->dev, "%s\n", __func__);
 	tot_len = skb->len;
 	clone_f = skb_cloned(skb);
+	shared_f = skb_shared(skb);
 	cpu_buf = !check_ptr_validation_falconmx((u32)(skb->head));
 
 	if (data && data->pmac) {
 		no_hdr_room_f = skb_headroom(skb) < data->pmac_len ? 1 : 0;
 		tot_len = skb->len + data->pmac_len;
 	}
-	if (cpu_buf || clone_f || no_hdr_room_f) {
+	if (cpu_buf || clone_f || no_hdr_room_f || shared_f) {
 		dev_dbg(cqm_ctrl->dev, "linearising\n");
 		new_buf = (u32)cqm_buffer_alloc(smp_processor_id(), 0,
 						tot_len, &buf_size);
@@ -1704,10 +1703,7 @@ static s32 cqm_cpu_pkt_tx(struct sk_buff *skb, struct cbm_tx_data *data,
 				pr_err("linearize failed\n");
 				goto ERR_CASE_1;
 			}
-			copied_to_cbm = 1;
 			tmp_data_ptr = new_buf;
-			if (data && data->pmac)
-				skb->len += data->pmac_len;
 			dev_dbg(cqm_ctrl->dev, "tmp_data_ptr 0x%x\n",
 				tmp_data_ptr);
 		}
@@ -1729,19 +1725,16 @@ static s32 cqm_cpu_pkt_tx(struct sk_buff *skb, struct cbm_tx_data *data,
 		skb->head = NULL;
 	}
 	if (setup_desc((struct cbm_desc *)&desc, tmp_data_ptr,
-		       (skb->len < (ETH_ZLEN + 8)) ? (ETH_ZLEN + 8) : skb->len,
+		       tot_len,
 		       skb->DW1, skb->DW0, skb->DW3, pool, policy)) {
 		dev_err(cqm_ctrl->dev, "cbm setup desc failed..\n");
 		cqm_buffer_free(smp_processor_id(), (void *)tmp_data_ptr, 1);
 		goto ERR_CASE_2;
 	}
-	if (copied_to_cbm)
-		dev_kfree_skb_any(skb);
+	dev_kfree_skb_any(skb);
 
 	if (cqm_cpu_enqueue(smp_processor_id(), &desc)) {
 		dev_err(cqm_ctrl->dev, "cpu enqueue failed..\n");
-		if (pool == CQM_CPU_POOL && policy == CQM_CPU_POLICY)
-			goto ERR_CASE_2;
 		cqm_buffer_free(smp_processor_id(), (void *)tmp_data_ptr, 1);
 		return CBM_FAILURE;
 	}
