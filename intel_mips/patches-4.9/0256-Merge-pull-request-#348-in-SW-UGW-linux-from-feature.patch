From f9c7578b23157dfcb3bd71d5145db16cde2e0143 Mon Sep 17 00:00:00 2001
From: CI Assistant <yossi.ilkanaev@intel.com>
Date: Tue, 1 Jan 2019 11:36:22 +0100
Subject: [PATCH] Merge pull request #348 in SW_UGW/linux from
 feature/DRVLIB_SW-846-aquantia-phy-ethtool to master

* commit '73b3cef47de4b86ff623c228365e63e8cf9dfb4e':
  DRVLIB_SW-864 - Add advertise-mode config in aquantia PHY driver
  DRVLIB_SW-846 - Changes in ltq eth driver to support aquantia PHY
  DRVLIB_SW-846 - Fix xgmac mdio read for clause-45
  DRVLIB_SW-846 - Add AQR107 to aquantia phy driver
---
 drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c   |  17 ++--
 .../ethernet/lantiq/switch-api/mac/xgmac_mdio.c    |  28 +++++-
 drivers/net/phy/aquantia.c                         | 112 ++++++++++++++++++++-
 3 files changed, 141 insertions(+), 16 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
index bf704db661d6..5bde7a99a0d6 100644
--- a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
+++ b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
@@ -1764,22 +1764,19 @@ static int prx300_phy_connect(struct net_device *dev, struct xrx500_port *port)
 
 	priv = netdev_priv(dev);
 
+	phydev = of_phy_find_device(port->phy_node);
+	if (!phydev || !phydev->mdio.dev.driver) {
+		netdev_err(dev, "Unable to find phydev\n");
+		return -ENODEV;
+	}
+
 	phydev = of_phy_connect(dev, port->phy_node, &xrx500_mdio_link,
 				0, port->phy_if);
 	if (!phydev) {
-		netdev_err(dev, "Unable to find phydev\n");
+		netdev_err(dev, "Unable to connect phydev\n");
 		return -ENODEV;
 	}
 
-	phydev->supported &= (SUPPORTED_10baseT_Half
-			      | SUPPORTED_10baseT_Full
-			      | SUPPORTED_100baseT_Half
-			      | SUPPORTED_100baseT_Full
-			      | SUPPORTED_1000baseT_Half
-			      | SUPPORTED_1000baseT_Full
-			      | SUPPORTED_Autoneg
-			      | SUPPORTED_MII
-			      | SUPPORTED_TP);
 	phydev->advertising = phydev->supported;
 	port->phydev = phydev;
 
diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_mdio.c b/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_mdio.c
index 44d789142371..449dbf7eabe7 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_mdio.c
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_mdio.c
@@ -244,8 +244,8 @@ int mdio_set_clause(void *pdev, u32 clause, u32 phy_id)
 
 	SET_N_BITS(mdio_c22p, phy_id, MDIO_CL22P_PORT0_WIDTH, clause);
 
-	mac_printf("MDIO: portID %d set to %s\n", phy_id,
-		   clause ? "Clause 22" : "Clause 45");
+	mac_dbg("MDIO: portID %d set to %s\n", phy_id,
+		clause ? "Clause 22" : "Clause 45");
 
 	/* Select port 0, 1, 2 and 3 as Clause 22/45 ports */
 	XGMAC_RGWR(pdata, MDIO_C22P, mdio_c22p);
@@ -441,11 +441,21 @@ static int xgmac_mdio_read(struct mii_bus *bus, int phyadr, int phyreg)
 	struct mac_ops *pdev = bus->priv;
 	struct mac_prv_data *pdata = GET_MAC_PDATA(pdev);
 	int phydata;
+	int clause;
 
 	mac_dbg("XGMAC %d: MDIO Read phyadr = %d, phyreg = %d\n",
 		pdata->mac_idx, phyadr, phyreg);
 
-	xgmac_mdio_single_rd(pdev, 0, phyadr, phyreg, &phydata);
+	if (phyreg & MII_ADDR_C45)
+		clause = 0;
+	else
+		clause = 1;
+
+	if (clause != mdio_get_clause(pdev, phyadr))
+		mdio_set_clause(pdev, clause, phyadr);
+
+	xgmac_mdio_single_rd(pdev, (phyreg >> 16) & 0x1F, phyadr,
+			     phyreg & 0xFFFF, &phydata);
 
 	mac_dbg("XGMAC %d: MDIO Read phydata = %#x\n",
 		pdata->mac_idx, phydata);
@@ -471,8 +481,18 @@ static int xgmac_mdio_write(struct mii_bus *bus, int phyadr, int phyreg,
 	struct mac_ops *pdev = bus->priv;
 	struct mac_prv_data *pdata = GET_MAC_PDATA(pdev);
 	int ret = 0;
+	int clause;
+
+	if (phyreg & MII_ADDR_C45)
+		clause = 0;
+	else
+		clause = 1;
+
+	if (clause != mdio_get_clause(pdev, phyadr))
+		mdio_set_clause(pdev, clause, phyadr);
 
-	xgmac_mdio_single_wr(pdev, 0, phyadr, phyreg, phydata);
+	xgmac_mdio_single_wr(pdev, (phyreg >> 16) & 0x1F, phyadr,
+			     phyreg & 0xFFFF, phydata);
 
 	mac_dbg("XGMAC %d: MDIO Write"
 		"phyadr %x phyreg %x phydata %x Completed\n",
diff --git a/drivers/net/phy/aquantia.c b/drivers/net/phy/aquantia.c
index 09b0b0aa8d68..701b97f2f210 100644
--- a/drivers/net/phy/aquantia.c
+++ b/drivers/net/phy/aquantia.c
@@ -21,19 +21,114 @@
 #define PHY_ID_AQ1202	0x03a1b445
 #define PHY_ID_AQ2104	0x03a1b460
 #define PHY_ID_AQR105	0x03a1b4a2
+#define PHY_ID_AQR107	0x03a1b4e0
 #define PHY_ID_AQR405	0x03a1b4b0
 
+#define AQ_MDIO_AN_VENDOR_1 0xC400
+#define AQ_MDIO_AN_VENDOR_1_ADV1G 0x8000
+
 #define PHY_AQUANTIA_FEATURES	(SUPPORTED_10000baseT_Full | \
 				 SUPPORTED_1000baseT_Full | \
 				 SUPPORTED_100baseT_Full | \
 				 PHY_DEFAULT_FEATURES)
 
+static int aquantia_c45_restart_aneg(struct phy_device *phydev)
+{
+	int val;
+
+	val = phy_read_mmd(phydev, MDIO_MMD_AN, MDIO_CTRL1);
+	if (val < 0)
+		return val;
+
+	val |= MDIO_AN_CTRL1_ENABLE | MDIO_AN_CTRL1_RESTART;
+
+	return phy_write_mmd(phydev, MDIO_MMD_AN, MDIO_CTRL1, val);
+}
+
+static int aquantia_config_advert(struct phy_device *phydev)
+{
+	int oldadv, adv;
+	int err, changed = 0;
+
+	/* Setup standard advertisement */
+	adv = phy_read_mmd(phydev, MDIO_MMD_AN, MDIO_AN_ADVERTISE);
+	if (adv < 0)
+		return adv;
+
+	oldadv = adv;
+	adv &= ~(ADVERTISE_ALL | ADVERTISE_100BASE4 | ADVERTISE_PAUSE_CAP |
+		 ADVERTISE_PAUSE_ASYM);
+	adv |= ethtool_adv_to_mii_adv_t(phydev->advertising);
+
+	if (adv != oldadv) {
+		err = phy_write_mmd(phydev, MDIO_MMD_AN, MDIO_AN_ADVERTISE,
+				    adv);
+		if (err < 0)
+			return err;
+
+		changed = 1;
+	}
+
+	/* Configure gigabit if it's supported */
+	adv = phy_read_mmd(phydev, MDIO_MMD_AN, AQ_MDIO_AN_VENDOR_1);
+	if (adv < 0)
+		return adv;
+
+	oldadv = adv;
+	if (phydev->advertising & SUPPORTED_1000baseT_Full)
+		adv |= AQ_MDIO_AN_VENDOR_1_ADV1G;
+	else
+		adv &= ~AQ_MDIO_AN_VENDOR_1_ADV1G;
+
+	if (adv != oldadv) {
+		changed = 1;
+		err = phy_write_mmd(phydev, MDIO_MMD_AN, AQ_MDIO_AN_VENDOR_1,
+				    adv);
+		if (err < 0)
+			return err;
+	}
+
+	/* Configure 10Gigabit */
+	adv = phy_read_mmd(phydev, MDIO_MMD_AN, MDIO_AN_10GBT_CTRL);
+	if (adv < 0)
+		return adv;
+
+	oldadv = adv;
+	if (phydev->advertising & SUPPORTED_10000baseT_Full)
+		adv |= MDIO_AN_10GBT_CTRL_ADV10G;
+	else
+		adv &= ~MDIO_AN_10GBT_CTRL_ADV10G;
+
+	if (adv != oldadv) {
+		changed = 1;
+		err = phy_write_mmd(phydev, MDIO_MMD_AN, MDIO_AN_10GBT_CTRL,
+				    adv);
+		if (err < 0)
+			return err;
+	}
+
+	return changed;
+}
+
 static int aquantia_config_aneg(struct phy_device *phydev)
 {
+	int err;
+
 	phydev->supported = PHY_AQUANTIA_FEATURES;
-	phydev->advertising = phydev->supported;
 
-	return 0;
+	if (phydev->autoneg != AUTONEG_ENABLE) {
+		pr_err("%s - Autoneg-off is not supported\n", __func__);
+
+		/* revert advertising mode to default */
+		phydev->advertising = phydev->supported;
+		return -EINVAL;
+	}
+
+	err = aquantia_config_advert(phydev);
+	if (err > 0)
+		err = aquantia_c45_restart_aneg(phydev);
+
+	return err;
 }
 
 static int aquantia_aneg_done(struct phy_device *phydev)
@@ -154,6 +249,18 @@ static struct phy_driver aquantia_driver[] = {
 	.read_status	= aquantia_read_status,
 },
 {
+	.phy_id		= PHY_ID_AQR107,
+	.phy_id_mask	= 0xfffffff0,
+	.name		= "Aquantia AQR107",
+	.features	= PHY_AQUANTIA_FEATURES,
+	.flags		= PHY_HAS_INTERRUPT,
+	.aneg_done	= aquantia_aneg_done,
+	.config_aneg    = aquantia_config_aneg,
+	.config_intr	= aquantia_config_intr,
+	.ack_interrupt	= aquantia_ack_interrupt,
+	.read_status	= aquantia_read_status,
+},
+{
 	.phy_id		= PHY_ID_AQR405,
 	.phy_id_mask	= 0xfffffff0,
 	.name		= "Aquantia AQR405",
@@ -173,6 +280,7 @@ static struct mdio_device_id __maybe_unused aquantia_tbl[] = {
 	{ PHY_ID_AQ1202, 0xfffffff0 },
 	{ PHY_ID_AQ2104, 0xfffffff0 },
 	{ PHY_ID_AQR105, 0xfffffff0 },
+	{ PHY_ID_AQR107, 0xfffffff0 },
 	{ PHY_ID_AQR405, 0xfffffff0 },
 	{ }
 };
