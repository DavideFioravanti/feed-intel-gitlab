From a49bf05eabf64b7ca8e3ef4a6f9930c045950e79 Mon Sep 17 00:00:00 2001
From: CI Assistant <yossi.ilkanaev@intel.com>
Date: Mon, 10 Sep 2018 11:44:28 +0200
Subject: [PATCH] Merge pull request #166 in SW_UGW/linux from
 feature/DRVLIB_SW-894-develop-the-p31g-phy-driver to master

* commit 'd11a1a1ee2a435b4617090a386d86acfae5ec843':
  DRVLIB_SW-894 - Add PRX300 sequence in gphy driver
  DRVLIB_SW-894 - Cleanup reset and reg structure in gphy driver
---
 drivers/net/ethernet/lantiq/xrx500_phy_fw.c | 206 ++++++++++++++++++++++------
 1 file changed, 165 insertions(+), 41 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/xrx500_phy_fw.c b/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
index b723f217fc98..65927c362f00 100644
--- a/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
+++ b/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
@@ -17,15 +17,8 @@
 
 #define XRX200_GPHY_FW_ALIGN	(16 * 1024)
 /* GPHY related */
-struct reset_control *phy_rst;
 static int g_xway_gphy_fw_loaded;
 
-#define RCU_RD_GPHY2_XRX500 BIT(29)
-#define RCU_RD_GPHY3_XRX500 BIT(28)
-#define RCU_RD_GPHY4_XRX500 BIT(26)
-#define RCU_RD_GPHY5_XRX500 BIT(25)
-#define RCU_RD_GPHYF_XRX500 BIT(31)
-
 /* xRX500 gphy (GSW-L) registers */
 #define GPHY2_LBADR_XRX500     0x0228
 #define GPHY2_MBADR_XRX500     0x022C
@@ -39,43 +32,123 @@ static int g_xway_gphy_fw_loaded;
 #define GPHYF_MBADR_XRX500     0x026C
 
 /* reset / boot a gphy */
-static struct ltq_xrx500_gphy_reset {
-	       u32 rd;
-	       u32 addr;
-	} xrx500_gphy[] = {
-		       {RCU_RD_GPHY2_XRX500, GPHY2_LBADR_XRX500},
-		       {RCU_RD_GPHY3_XRX500, GPHY3_LBADR_XRX500},
-		       {RCU_RD_GPHY4_XRX500, GPHY4_LBADR_XRX500},
-		       {RCU_RD_GPHY5_XRX500, GPHY5_LBADR_XRX500},
-		       {RCU_RD_GPHYF_XRX500, GPHYF_LBADR_XRX500},
-		};
+static u32 xrx500_gphy[] = {
+	GPHY2_LBADR_XRX500,
+	GPHY3_LBADR_XRX500,
+	GPHY4_LBADR_XRX500,
+	GPHY5_LBADR_XRX500,
+	GPHYF_LBADR_XRX500,
+};
 
 #define GSW_L_TOP_BASE 0xBC003C00
-static void gsw_reg_w32(u32 val, u32 reg_off)
+
+/* prx300 gphy register definition */
+#define PRX300_GPHY_CGU_BASE 0xb6200000
+#define PRX300_GPHY_FCR 0x800
+#define PRX300_GPHY0_GPS0 0x804
+#define PRX300_GPHY0_GPS1 0x808
+#define PRX300_GPHY0_GPS0_LO 0x3f004000
+#define PRX300_GPHY0_GPS0_HI 0
+#define PRX300_FW_LOAD_ADDR 0x18da0000
+
+#define PRX300_GPHY_CDB_PDI_BASE 0xb6210100
+#define PRX300_GPHY_CDB_PDI_PLL_CFG0 0x0
+#define PRX300_GPHY_CDB_PDI_PLL_CFG2 0x8
+#define PRX300_GPHY_CDB_PDI_PLL_MISC 0xc
+#define PRX300_PLL_FBDIV 0x145
+#define PRX300_PLL_REFDIV 0x4
+#define PRX300_GPHY_FORCE_LATCH 1
+#define PRX300_GPHY_CLEAR_STICKY 1
+
+#define PRX300_CHIP_TOP 0xb6180000
+#define PRX300_IFMUX_CFG 0x120
+
+static void gsw_reg_w32(u32 base, u32 val, u32 reg_off)
 {
-	ltq_w32(val, (void __iomem *)(GSW_L_TOP_BASE + reg_off));
+	ltq_w32(val, (void __iomem *)(base + reg_off));
 }
 
-/* reset and boot a gphy. these phys only exist on xrx200 SoC */
-int xrx500_gphy_boot(struct device *dev, unsigned int id, dma_addr_t dev_addr)
+static void gsw_reg_w32_mask(u32 base, u32 clear, u32 val, u32 reg_off)
 {
-	if (of_machine_is_compatible("lantiq,grx500")) {
-		if (id > 4) {
-			dev_info(dev, "%u is an invalid gphy id\n", id);
-			return -EINVAL;
-		}
-		reset_control_assert(phy_rst);
-		gsw_reg_w32((dev_addr & 0xFFFF), xrx500_gphy[id].addr);
-		gsw_reg_w32(((dev_addr >> 16) & 0xFFFF),
-			    (xrx500_gphy[id].addr + 4));
-		reset_control_deassert(phy_rst);
-		dev_info(dev, "booting GPHY%u firmware at %X for GRX500\n",
-			 id, dev_addr);
+	ltq_w32_mask(clear, val, (void __iomem *)(base + reg_off));
+}
+
+/* xrx500 specific boot sequence */
+static int xrx500_gphy_boot(struct device *dev, struct reset_control **phy_rst,
+			    unsigned int id, dma_addr_t dev_addr)
+{
+	if (id > 4) {
+		dev_info(dev, "%u is an invalid gphy id\n", id);
+		return -EINVAL;
 	}
+	reset_control_assert(phy_rst[0]);
+	gsw_reg_w32(GSW_L_TOP_BASE, (dev_addr & 0xFFFF),
+		    xrx500_gphy[id]);
+	gsw_reg_w32(GSW_L_TOP_BASE, ((dev_addr >> 16) & 0xFFFF),
+		    (xrx500_gphy[id] + 4));
+	reset_control_deassert(phy_rst[0]);
+	dev_info(dev, "booting GPHY%u firmware at %X for GRX500\n",
+		 id, dev_addr);
+
 	return 0;
 }
 
-static dma_addr_t xway_gphy_load(struct platform_device *pdev)
+/* prx300 specific boot sequence */
+static int prx300_gphy_boot(struct device *dev, struct reset_control **phy_rst,
+			    unsigned int id, dma_addr_t dev_addr, void *addr)
+{
+	/* set LAN interface to GPHY */
+	gsw_reg_w32_mask(PRX300_CHIP_TOP, 0x2, 0x0, PRX300_IFMUX_CFG);
+
+	/* GPHY reset */
+	reset_control_assert(phy_rst[0]);
+	udelay(500);
+
+	/* CDB and Power Down */
+	reset_control_assert(phy_rst[1]);
+	reset_control_assert(phy_rst[2]);
+	udelay(400);
+
+	/* release CDB reset */
+	reset_control_deassert(phy_rst[1]);
+
+	/* GPHY FW address and pin strapping */
+	gsw_reg_w32(PRX300_GPHY_CGU_BASE, dev_addr, PRX300_GPHY_FCR);
+	gsw_reg_w32(PRX300_GPHY_CGU_BASE, PRX300_GPHY0_GPS0_LO,
+		    PRX300_GPHY0_GPS0);
+	gsw_reg_w32(PRX300_GPHY_CGU_BASE, PRX300_GPHY0_GPS0_HI,
+		    PRX300_GPHY0_GPS1);
+
+	/* release GPHY reset */
+	reset_control_deassert(phy_rst[0]);
+	udelay(500);
+
+	/* GPHY Power on */
+	reset_control_deassert(phy_rst[2]);
+
+	/* Set divider and misc config */
+	gsw_reg_w32_mask(PRX300_GPHY_CDB_PDI_BASE, 0xFFF0,
+			 (PRX300_PLL_FBDIV << 4), PRX300_GPHY_CDB_PDI_PLL_CFG0);
+	gsw_reg_w32(PRX300_GPHY_CDB_PDI_BASE, (PRX300_PLL_REFDIV << 8),
+		    PRX300_GPHY_CDB_PDI_PLL_CFG2);
+	gsw_reg_w32_mask(PRX300_GPHY_CDB_PDI_BASE,
+			 (PRX300_GPHY_FORCE_LATCH << 13) |
+			  (PRX300_GPHY_CLEAR_STICKY << 14),
+			 (PRX300_GPHY_FORCE_LATCH << 13) |
+			  (PRX300_GPHY_CLEAR_STICKY << 14),
+			 PRX300_GPHY_CDB_PDI_PLL_MISC);
+
+	/* delay to wait until firmware boots up */
+	msleep(100);
+
+	dev_info(dev, "booting GPHY%u firmware at %X for PRX300\n",
+		 id, dev_addr);
+
+	devm_iounmap(dev, addr);
+	return 0;
+}
+
+static dma_addr_t xway_gphy_load(struct platform_device *pdev, void **addr)
 {
 	const struct firmware *fw;
 	dma_addr_t dev_addr = 0;
@@ -100,7 +173,23 @@ static dma_addr_t xway_gphy_load(struct platform_device *pdev)
 	 */
 	size = fw->size + XRX200_GPHY_FW_ALIGN;
 
-	fw_addr = dma_alloc_coherent(&pdev->dev, size, &dev_addr, GFP_KERNEL);
+	if (of_device_is_compatible(pdev->dev.of_node, "intel,phy-prx300")) {
+		/* Temporary workaround for PRX300 GPHY issue.
+		 * Firmware loading in PRX300 GPHY does not work if address
+		 * is in DDR. For this reason we hardcode the address to SRAM
+		 * location (which is assumed to be free at the beginning of
+		 * boot).
+		 */
+		dev_addr = (dma_addr_t)PRX300_FW_LOAD_ADDR;
+		fw_addr = devm_ioremap_nocache(&pdev->dev, PRX300_FW_LOAD_ADDR,
+					       size);
+		dev_info(&pdev->dev, "Temporary use SRAM for firmware %p:%x\n",
+			 fw_addr, dev_addr);
+	} else {
+		fw_addr = dma_alloc_coherent(&pdev->dev, size, &dev_addr,
+					     GFP_KERNEL);
+	}
+
 	if (fw_addr) {
 		fw_addr = PTR_ALIGN(fw_addr, XRX200_GPHY_FW_ALIGN);
 		dev_addr = ALIGN(dev_addr, XRX200_GPHY_FW_ALIGN);
@@ -110,6 +199,7 @@ static dma_addr_t xway_gphy_load(struct platform_device *pdev)
 	}
 
 	release_firmware(fw);
+	*addr = fw_addr;
 	return dev_addr;
 }
 
@@ -119,9 +209,11 @@ static int xway_phy_fw_probe(struct platform_device *pdev)
 	struct property *pp;
 	unsigned char *phyids;
 	int i, ret = 0;
-	char phy_str[7];
+	char phy_str[16];
+	struct reset_control *phy_rst[3];
+	void *addr;
 
-	fw_addr = xway_gphy_load(pdev);
+	fw_addr = xway_gphy_load(pdev, &addr);
 	if (!fw_addr)
 		return -EPROBE_DEFER;
 
@@ -132,10 +224,41 @@ static int xway_phy_fw_probe(struct platform_device *pdev)
 	phyids = pp->value;
 	for (i = 0; i < pp->length && !ret; i++) {
 		sprintf(phy_str, "phy%d", phyids[i]);
-		phy_rst = devm_reset_control_get(&pdev->dev, phy_str);
-		if (IS_ERR(phy_rst))
-			return PTR_ERR(phy_rst);
-		ret = xrx500_gphy_boot(&pdev->dev, phyids[i], fw_addr);
+		phy_rst[0] = devm_reset_control_get(&pdev->dev, phy_str);
+		if (IS_ERR(phy_rst[0])) {
+			dev_err(&pdev->dev, "fail to get %s prop\n", phy_str);
+			return PTR_ERR(phy_rst[0]);
+		}
+
+		if (of_device_is_compatible(pdev->dev.of_node,
+					    "lantiq,phy-xrx500")) {
+			ret = xrx500_gphy_boot(&pdev->dev, phy_rst, phyids[i],
+					       fw_addr);
+		} else if (of_device_is_compatible(pdev->dev.of_node,
+						   "intel,phy-prx300")) {
+			/* phy cdb reset */
+			sprintf(phy_str, "phy_cdb%d", phyids[i]);
+			phy_rst[1] = devm_reset_control_get(&pdev->dev,
+							    phy_str);
+			if (IS_ERR(phy_rst[1])) {
+				dev_err(&pdev->dev, "fail to get %s prop\n",
+					phy_str);
+				return PTR_ERR(phy_rst[1]);
+			}
+
+			/* phy power down */
+			sprintf(phy_str, "phy_pwr_down%d", phyids[i]);
+			phy_rst[2] = devm_reset_control_get(&pdev->dev,
+							    phy_str);
+			if (IS_ERR(phy_rst[2])) {
+				dev_err(&pdev->dev, "fail to get %s prop\n",
+					phy_str);
+				return PTR_ERR(phy_rst[2]);
+			}
+
+			ret = prx300_gphy_boot(&pdev->dev, phy_rst, phyids[i],
+					       fw_addr, addr);
+		}
 	}
 	if (!ret)
 		mdelay(100);
@@ -155,6 +278,7 @@ EXPORT_SYMBOL(is_xway_gphy_fw_loaded);
 
 static const struct of_device_id xway_phy_match[] = {
 	{ .compatible = "lantiq,phy-xrx500" },
+	{ .compatible = "intel,phy-prx300" },
 	{},
 };
 MODULE_DEVICE_TABLE(of, xway_phy_match);
